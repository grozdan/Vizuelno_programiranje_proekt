<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSCore</name>
    </assembly>
    <members>
        <member name="F:CSCore.ACM.AcmDriverDetails.FourCCType">
            <summary>
            Must be ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC for acm drivers
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.FourCCComp">
            <summary>
            Currently not used. Default value = ACMDRIVERDETAILS_FCCCOMP_UNDEFINED 
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.ShortName">
            <summary>
            Length = ACMDRIVERDETAILS_SHORTNAME_CHARS = 32 chars
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.LongName">
            <summary>
            Length = ACMDRIVERDETAILS_LONGNAME_CHARS = 128 chars
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.Copyright">
            <summary>
            Length = ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80 chars
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.Licensing">
            <summary>
            Length = ACMDRIVERDETAILS_LICENSING_CHARS = 128 chars
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.Features">
            <summary>
            Length = ACMDRIVERDETAILS_FEATURES_CHARS = 512 chars
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacConstant.ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN">
            <summary>
            4 bit
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacConstant.ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN">
            <summary>
            5 bit
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacConstant.ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER">
            <summary>
            15 bit
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacConstant.ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER">
            <summary>
            31 bit
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacConstant.ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN">
            <summary>
            5 bit
            </summary>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacFrameHeader.#ctor(System.IO.Stream,CSCore.Codecs.FLAC.FlacMetadataStreamInfo,System.Boolean)">
            <param name="streamInfo">Can be null</param>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacPreScanMethodMode.Async">
            <summary>
            Scan async BUT don't use the stream while scan is running because the stream position
            will change while scanning. If you playback the stream, it will cause an error!
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacMetadataStreamInfo.TotalSamples">
            <summary>
            0 = Unknown
            </summary>
        </member>
        <member name="M:CSCore.WaveFormat.#ctor">
            <summary>
            44100Hz, 16bps, 2 channels, pcm
            </summary>
        </member>
        <member name="P:CSCore.WaveFormat.BlockAlign">
            <summary>
            Frame-Size = [channels>] * (( [bits/sample]+7) / 8)
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.Mp3PaddingFlags">
            <summary>
            Padding Flags
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP3.MP3Frame.ParseFrame(System.Byte[])">
            <summary>
            <remarks>
            http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm
            </remarks>
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP3.MP3WebStream.SetAllowUnsafeHeaderParsing20">
            <summary>
            Copied from
            http:
                  //social.msdn.microsoft.com/forums/en-US/netfxnetcom/thread/ff098248-551c-4da9-8ba5-358a9f8ccc57/
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.XingHeader">
            <summary>
            <remarks>
            Liste von http://www.codeproject.com/KB/audio-video/mpegaudioinfo.aspx#XINGHeader ||
            www.mp3-tech.org/programmer/sources/vbrheadersdk.zip
            </remarks>
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioCaptureClient">
            <summary>
            http: //msdn.microsoft.com/en-us/library/dd370858(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetBufferNative(System.IntPtr@,System.UInt32@,CSCore.CoreAudioAPI.AudioClientBufferFlags@,System.UInt64@,System.UInt64@)">
            <summary>
            Retrieves a pointer to the next available packet of data in the capture endpoint buffer.
            http: //msdn.microsoft.com/en-us/library/dd370859(v=vs.85).aspx
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetBuffer(System.UInt32@,CSCore.CoreAudioAPI.AudioClientBufferFlags@,System.UInt64@,System.UInt64@)">
            <summary>
            Retrieves a pointer to the next available packet of data in the capture endpoint buffer.
            http: //msdn.microsoft.com/en-us/library/dd370859(v=vs.85).aspx
            </summary>
            <remarks>
            Use Marshal.Copy to convert the pointer to the buffer into an array.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetBuffer(System.UInt32@,CSCore.CoreAudioAPI.AudioClientBufferFlags@)">
            <summary>
            Retrieves a pointer to the next available packet of data in the capture endpoint buffer.
            http: //msdn.microsoft.com/en-us/library/dd370859(v=vs.85).aspx
            </summary>
            <remarks>
            Use Marshal.Copy to convert the pointer to the buffer into an array.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.ReleaseBufferNative(System.UInt32)">
            <summary>
            The ReleaseBuffer method releases the buffer.
            http: //msdn.microsoft.com/en-us/library/dd370861(v=vs.85).aspx
            </summary>
            <param name="framesRead">The number of audio frames that the client read from the
            capture buffer. This parameter must be either equal to the number of frames in the
            previously acquired data packet or 0.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.ReleaseBuffer(System.UInt32)">
            <summary>
            The ReleaseBuffer method releases the buffer.
            http: //msdn.microsoft.com/en-us/library/dd370861(v=vs.85).aspx
            </summary>
            <param name="framesRead">The number of audio frames that the client read from the
            capture buffer. This parameter must be either equal to the number of frames in the
            previously acquired data packet or 0.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetNextPacketSizeNative(System.UInt32@)">
            <summary>
            The GetNextPacketSize method retrieves the number of frames in the next data packet in
            the capture endpoint buffer.
            http: //msdn.microsoft.com/en-us/library/dd370860(v=vs.85).aspx
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetNextPacketSize">
            <summary>
            The GetNextPacketSize method retrieves the number of frames in the next data packet in
            the capture endpoint buffer.
            http: //msdn.microsoft.com/en-us/library/dd370860(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioCaptureClient.NextPacketSize">
            <summary>
            Size of the next packet in frames (the size of one frame equals the blockalign value of the waveformat).
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioClientStreamFlags">
            <summary>
            For details see:
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370791(v=vs.85).aspx and
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370789(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientStreamFlags.StreamFlags_RateAdjust">
            <summary>
            Supported since Windows 7
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioMeterInformation">
            <summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368227(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.FromDevice(CSCore.CoreAudioAPI.MMDevice)">
            <summary>
            Creates a new AudioMeterInformation instance for the given device.
            </summary>
            <returns>AudioMeterInformation</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetPeakValueNative(System.Single@)">
            <summary>
            The GetPeakValue method gets the peak sample value for the channels in the audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetPeakValue">
            <summary>
            The GetPeakValue method gets the peak sample value for the channels in the audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetMeteringChannelCountNative(System.Int32@)">
            <summary>
            The GetMeteringChannelCount method gets the number of channels in the audio stream that
            are monitored by peak meters.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetMeteringChannelCount">
            <summary>
            The GetMeteringChannelCount method gets the number of channels in the audio stream that
            are monitored by peak meters.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetChannelsPeakValuesNative(System.Int32,System.Single[]@)">
            <summary>
            The GetChannelsPeakValues method gets the peak sample values for all the channels in the
            audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetChannelsPeakValues(System.Int32)">
            <summary>
            The GetChannelsPeakValues method gets the peak sample values for all the channels in the
            audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetChannelsPeakValues">
            <summary>
            The GetChannelsPeakValues method gets the peak sample values for all the channels in the
            audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.QueryHardwareSupportNative(CSCore.CoreAudioAPI.EndpointHardwareSupport@)">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.QueryHardwareSupport">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioMeterInformation.MeteringChannelCount">
            <summary>
            Gets the number of channels in the audio stream that are monitored by peak meters.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioMeterInformation.Item(System.Int32)">
            <summary>
            Gets the peak sample value for the given channelindex.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioMeterInformation.HardwareSupport">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioMeterInformation.PeakValue">
            <summary>
            Gets the peak sample value for the channels in the audio stream.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionControl2">
            <summary>
            IAudioSessionControl2
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.GetStateNative(CSCore.CoreAudioAPI.AudioSessionState@)">
            <summary>
            The GetState method retrieves the current state of the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.GetDisplayNameNative(System.String@)">
            <summary>
            The GetDisplayName method retrieves the display name for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.SetDisplayNameNative(System.String,System.Guid)">
            <summary>
            The SetDisplayName method assigns a display name to the current session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.GetIconPathNative(System.String@)">
            <summary>
            The GetIconPath method retrieves the path for the display icon for the audio session.
            </summary>
            <param name="iconPath">See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368261(v=vs.85).aspx </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.SetIconPathNative(System.String,System.Guid)">
            <summary>
            The SetDisplayName method assigns a display name to the current session.
            </summary>
            <param name="iconPath">See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368274(v=vs.85).aspx </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.GetGroupingParamNative(System.Guid@)">
            <summary>
            The GetGroupingParam method retrieves the grouping parameter of the audio session.
            </summary>
            <returns>HRESULT</returns>
            <remarks>For some more information about Grouping Parameters see http://msdn.microsoft.com/en-us/library/windows/desktop/dd370848(v=vs.85).aspx </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.SetGroupingParamNative(System.Guid,System.Guid)">
            <summary>
            The SetGroupingParam method assigns a session to a grouping of sessions.
            </summary>
            <returns>HRESULT</returns>
            <remarks>For some more information about Grouping Parameters see http://msdn.microsoft.com/en-us/library/windows/desktop/dd370848(v=vs.85).aspx </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.RegisterAudioSessionNotificationNative(CSCore.CoreAudioAPI.IAudioSessionEvents)">
            <summary>
            The RegisterAudioSessionNotification method registers the client to receive notifications of session events, including changes in the stream state.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.RegisterAudioSessionNotification(CSCore.CoreAudioAPI.IAudioSessionEvents)">
            <summary>
            The RegisterAudioSessionNotification method registers the client to receive notifications of session events, including changes in the stream state.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.UnregisterAudioSessionNotificationNative(CSCore.CoreAudioAPI.IAudioSessionEvents)">
            <summary>
            The UnregisterAudioSessionNotification method deletes a previous registration by the client to receive notifications.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.UnregisterAudioSessionNotification(CSCore.CoreAudioAPI.IAudioSessionEvents)">
            <summary>
            The UnregisterAudioSessionNotification method deletes a previous registration by the client to receive notifications.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl.SessionState">
            <summary>
            Gets the current state of the audio session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl.DisplayName">
            <summary>
            Gets or sets the display name for the audio session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl.IconPath">
            <summary>
            Gets or sets the path for the display icon for the audio session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl.GroupingParam">
            <summary>
            Gets or sets the grouping parameter of the audio session.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.GetSessionIdentifierNative(System.String@)">
            <summary>
            Gets the session identifier. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368252(v=vs.85).aspx
            </summary>
            <param name="sessionID">Audio session identifier.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.GetSessionInstanceIdentifierNative(System.String@)">
            <summary>
            Gets the identifier of the audio session instance. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368255(v=vs.85).aspx.
            </summary>
            <param name="sessionID">Identifier of a particular instance of the audio session.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.GetProcessIdNative(System.Int32@)">
            <summary>
            Gets the process identifier of the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.IsSystemSoundSessionNative">
            <summary>
            The IsSystemSoundsSession method indicates whether the session is a system sounds session.
            </summary>
            <returns>HRESULT; S_OK = true, S_FALSE = false</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.SetDuckingPreferenceNative(CSCore.Win32.NativeBool)">
            <summary>
            The SetDuckingPreference method enables or disables the default stream attenuation experience (auto-ducking) provided by the system.
            </summary>
            <param name="enableSystemAutoDucking">A BOOL variable that enables or disables system auto-ducking.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.SetDuckingPreference(System.Boolean)">
            <summary>
            The SetDuckingPreference method enables or disables the default stream attenuation experience (auto-ducking) provided by the system.
            </summary>
            <param name="enableSystemAutoDucking">A BOOL variable that enables or disables system auto-ducking.</param>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.SessionIdentifier">
            <summary>
            Gets the session identifier. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368252(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.SessionIstanceIdentifier">
            <summary>
            Gets the identifier of the audio session instance. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368255(v=vs.85).aspx.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.ProcessID">
            <summary>
            Gets the process identifier of the audio session.
            In the case of that the session is no SingleProcessSession (see <see cref="P:CSCore.CoreAudioAPI.AudioSessionControl2.IsSingleProcessSession"/>), the ProcessID is the initial identifier of the process that created the session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.IsSingleProcessSession">
            <summary>
            Indicates whether the session spans more than one process. 
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.Process">
            <summary>
            Gets the process of the audio session.
            In the case of that the session is no SingleProcessSession (see <see cref="P:CSCore.CoreAudioAPI.AudioSessionControl2.IsSingleProcessSession"/>), the Process is the process that created the session.
            If the process that created the session is not available anymore, the returnvalue is null.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.IsSystemSoundSession">
            <summary>
            Indicates whether the session is a system sounds session.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionDisconnectReason">
            <summary>
            AudioSessionDisconnectReason
            </summary>
            <remarks>For more information about WTS sessions, see the Windows SDK documentation.</remarks>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonDeviceRemoval">
            <summary>
            The user removed the audio endpoint device.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonServerShutdown">
            <summary>
            The Windows audio service has stopped.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonFormatChanged">
            <summary>
            The stream format changed for the device that the audio session is connected to.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonSessionLogoff">
            <summary>
            The user logged off the Windows Terminal Services (WTS) session that the audio session was running in.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonSessionDisconnected">
            <summary>
            The WTS session that the audio session was running in was disconnected.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonExclusiveModeOverride">
            <summary>
            The (shared-mode) audio session was disconnected to make the audio endpoint device available for an exclusive-mode connection.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionEnumerator">
            <summary>
            AudioSessionEnumerator.
            See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368281(v=vs.85).aspx. 
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEnumerator.GetCountNative(System.Int32@)">
            <summary>
            The GetCount method gets the total number of audio sessions that are open on the audio device.
            </summary>
            <param name="count">Receives the total number of audio sessions.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEnumerator.GetSessionNative(System.Int32,CSCore.CoreAudioAPI.AudioSessionControl@)">
            <summary>
            The GetSession method gets the audio session specified by an audio session number.
            </summary>
            <param name="index">The session number. If there are n sessions, the sessions are numbered from 0 to n – 1. To get the number of sessions, call the GetCount method.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEnumerator.GetSession(System.Int32)">
            <summary>
            Gets the audio session specified by an audio session number.
            </summary>
            <param name="index">The session number. If there are n sessions, the sessions are numbered from 0 to n – 1. To get the number of sessions, call the GetCount method.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEnumerator.GetEnumerator">
            <summary>
            AudioSessionControl enumerator
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionEnumerator.Count">
            <summary>
            Gets the total number of audio sessions.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionEnumerator.Item(System.Int32)">
            <summary>
            Gets the audio session specified by an index.
            </summary>
            <param name="index">The session number. If there are n sessions, the sessions are numbered from 0 to n – 1. To get the number of sessions, call the GetCount method.</param>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionEvents">
            <summary>
            AudioSessionEvents.
            Fore more information take a look at: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368289(v=vs.85).aspx
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.DisplayNameChanged">
            <summary>
            Notifies the client that the display name for the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.IconPathChanged">
            <summary>
            Notifies the client that the display icon for the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.SimpleVolumeChanged">
            <summary>
            Notifies the client that the volume level or muting state of the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.ChannelVolumeChanged">
            <summary>
            Notifies the client that the volume level of an audio channel in the session submix has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.GroupingParamChanged">
            <summary>
            Notifies the client that the grouping parameter for the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.StateChanged">
            <summary>
            Notifies the client that the stream-activity state of the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.SessionDisconnected">
            <summary>
            Notifies the client that the session has been disconnected.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionEventContextEventArgs">
            <summary>
            AudioSessionEventContextEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionEventContextEventArgs.EventContext">
            <summary>
            The event context value.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionDisplayNameChangedEventArgs">
            <summary>
            AudioSessionDisplayNameChangedEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionDisplayNameChangedEventArgs.NewDisplayName">
            <summary>
            The new display name for the session.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionIconPathChangedEventArgs">
            <summary>
            AudioSessionIconPathChangedEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionIconPathChangedEventArgs.NewIconPath">
            <summary>
            The path for the new display icon for the session.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionSimpleVolumeChangedEventArgs">
            <summary>
            AudioSessionSimpleVolumeChanged
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionSimpleVolumeChangedEventArgs.NewVolume">
            <summary>
            The new volume level for the audio session. This parameter is a value in the range 0.0 to 1.0, where 0.0 is silence and 1.0 is full volume (no attenuation).
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionSimpleVolumeChangedEventArgs.IsMuted">
            <summary>
            The new muting state. If true, muting is enabled. If false, muting is disabled.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs">
            <summary>
            AudioSessionChannelVolumeChanged
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChannelCount">
            <summary>
            The channel count. This parameter specifies the number of audio channels in the session submix.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChannelVolumes">
            <summary>
            Each volume level is a value in the range 0.0 to 1.0, where 0.0 is silence and 1.0 is full volume.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChangedChannel">
            <summary>
            Use this value as an index into the <see cref="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChannelVolumes"/>.
            If the session submix contains n channels, the channels are numbered from 0 to n– 1. If more than one channel might have changed, the value of ChangedChannel is (DWORD)(–1).
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.Item(System.Int32)">
            <summary>
            Returns the volume of the specified channel. <see cref="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChannelVolumes"/>
            </summary>
            <param name="channelIndex"></param>
            <returns>Volume level of the specified channelIndex in the range 0.0 to 1.0, where 0.0 is silence and 1.0 is full volume.</returns>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionGroupingParamChangedEventArgs">
            <summary>
            AudioSessionGroupingParamChangedEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionGroupingParamChangedEventArgs.NewGroupingParam">
            <summary>
            The new grouping parameter for the session.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionStateChangedEventArgs">
            <summary>
            AudioSessionStateChanged
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionStateChangedEventArgs.NewState">
            <summary>
            The new session state.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionDisconnectedEventArgs">
            <summary>
            AudioSessionDisconnectedEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionDisconnectedEventArgs.DisconnectReason">
            <summary>
            The reason that the audio session was disconnected.
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:CSCore.CoreAudioAPI.AudioSessionManager.GetAudioSessionControlNative(System.Guid,System.Int32,CSCore.CoreAudioAPI.AudioSessionControl@)" ignoriert -->
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:CSCore.CoreAudioAPI.AudioSessionManager.GetAudioSessionControl(System.Guid,System.Int32)" ignoriert -->
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager.GetSimpleAudioVolumeNative(System.Guid,CSCore.Win32.NativeBool,CSCore.CoreAudioAPI.SimpleAudioVolume@)">
            <summary>
            The GetSimpleAudioVolume method retrieves a simple audio volume control.
            </summary>
            <param name="crossProcessSession">Specifies whether the request is for a cross-process session. Set to TRUE if the session is cross-process. Set to FALSE if the session is not cross-process.</param>
            <param name="audioSessionGuid">If the GUID does not identify a session that has been previously opened, the call opens a new but empty session. If the value is Guid.Empty, the method assigns the stream to the default session.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager.GetSimpleAudioVolume(System.Guid,System.Boolean)">
            <summary>
            The GetSimpleAudioVolume method retrieves a simple audio volume control.
            </summary>
            <param name="crossProcessSession">Specifies whether the request is for a cross-process session. Set to TRUE if the session is cross-process. Set to FALSE if the session is not cross-process.</param>
            <param name="audioSessionGuid">If the GUID does not identify a session that has been previously opened, the call opens a new but empty session. If the value is Guid.Empty, the method assigns the stream to the default session.</param>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionManager2">
            <summary>
            IAudioSessionManager2
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.FromMMDevice(CSCore.CoreAudioAPI.MMDevice)">
            <summary>
            Creates a new instance of AudioSessionManager2 based on a MMDevice.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.GetSessionEnumeratorNative(CSCore.CoreAudioAPI.AudioSessionEnumerator@)">
            <summary>
            The GetSessionEnumerator method gets a pointer to the audio session enumerator object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.GetSessionEnumerator">
            <summary>
            The GetSessionEnumerator method gets a pointer to the audio session enumerator object.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.RegisterSessionNotificationNative(CSCore.CoreAudioAPI.IAudioSessionNotification)">
            <summary>
            The RegisterSessionNotification method registers the application to receive a notification when a session is created.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.RegisterSessionNotification(CSCore.CoreAudioAPI.IAudioSessionNotification)">
            <summary>
            The RegisterSessionNotification method registers the application to receive a notification when a session is created.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.UnregisterSessionNotificationNative(CSCore.CoreAudioAPI.IAudioSessionNotification)">
            <summary>
            The UnregisterSessionNotification method deletes the registration to receive a notification when a session is created.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.UnregisterSessionNotification(CSCore.CoreAudioAPI.IAudioSessionNotification)">
            <summary>
            The UnregisterSessionNotification method deletes the registration to receive a notification when a session is created.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.RegisterDuckNotificationNative(System.String,CSCore.CoreAudioAPI.IAudioVolumeDuckNotification)">
            <summary>
            Registers the application to receive ducking notifications.
            </summary>
            <param name="sessionID"> Applications that are playing a media stream and want to provide custom stream attenuation or ducking behavior, pass their own session instance identifier.
            Other applications that do not want to alter their streams but want to get all the ducking notifications must pass NULL.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.RegisterDuckNotification(System.String,CSCore.CoreAudioAPI.IAudioVolumeDuckNotification)">
            <summary>
            Registers the application to receive ducking notifications.
            </summary>
            <param name="sessionID"> Applications that are playing a media stream and want to provide custom stream attenuation or ducking behavior, pass their own session instance identifier.
            Other applications that do not want to alter their streams but want to get all the ducking notifications must pass NULL.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.UnregisterDuckNotificationNative(CSCore.CoreAudioAPI.IAudioVolumeDuckNotification)">
            <summary>
            Deletes the registration to receive ducking notifications.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.UnregisterDuckNotification(CSCore.CoreAudioAPI.IAudioVolumeDuckNotification)">
            <summary>
            Deletes the registration to receive ducking notifications.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionNotification">
            <summary>
            AudioSessionNotification.
            See http://msdn.microsoft.com/en-us/library/windows/desktop/dd370969(v=vs.85).aspx.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionNotification.SessionCreated">
            <summary>
            Notifies the registered processes that the audio session has been created.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.SessionCreatedEventArgs">
            <summary>
            SessionCreatedEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.SessionCreatedEventArgs.NewSession">
            <summary>
            AudioSessionControl interface of the audio session that was created.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionState">
            <summary>
            AudioSession State.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionState.AudioSessionStateInactive">
            <summary>
            The session has no active audio streams.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionState.AudioSessionStateActive">
            <summary>
            The session has active audio streams.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionState.AudioSessionStateExpired">
            <summary>
            The session is dormant.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioVolumeDuckNotification">
            <summary>
            AudioVolumeDuckNotification
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioVolumeDuckNotification.VolumeDuckNotification">
            <summary>
            Notification about a pending system ducking event.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioVolumeDuckNotification.VolumeUnDuckNotification">
            <summary>
            Notification about a pending system unducking event.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.VolumeDuckNotificationEventArgs">
            <summary>
            VolumeDuckNotificationEventArgs. Fore more see http://msdn.microsoft.com/en-us/library/windows/desktop/dd371010(v=vs.85).aspx.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.VolumeDuckNotificationEventArgs.SessionID">
            <summary>
            A string containing the session instance identifier of the communications session that raises the the auto-ducking event. To get the session instance identifier, call IAudioSessionControl2::GetSessionInstanceIdentifier.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.VolumeDuckNotificationEventArgs.CountCommunicationSessions">
            <summary>
            The number of active communications sessions. If there are n sessions, the sessions are numbered from 0 to –1.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.IMMNotificationClient">
            <summary>
            mmdeviceapi.h line 221
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnDeviceStateChanged(System.String,CSCore.CoreAudioAPI.DeviceState)">
            <summary>
            The OnDeviceStateChanged method indicates that the state of an audio endpoint device has
            changed.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnDeviceAdded(System.String)">
            <summary>
            The OnDeviceAdded method indicates that a new audio endpoint device has been added.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnDeviceRemoved(System.String)">
            <summary>
            The OnDeviceRemoved method indicates that an audio endpoint device has been removed.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnDefaultDeviceChanged(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.Role,System.String)">
            <summary>
            The OnDefaultDeviceChanged method notifies the client that the default audio endpoint
            device for a particular device role has changed.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnPropertyValueChanged(System.String,CSCore.Win32.PropertyKey)">
            <summary>
            The OnPropertyValueChanged method indicates that the value of a property belonging to an
            audio endpoint device has changed.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrixElement.Value">
            <summary>
            Value from 0 to 1
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.DolbyDigitalPlusDecoder">
            <summary>
            CLSID_CMSDDPlusDecMFT
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.MPEGAudioDecoder">
            <summary>
            CLSID_CMSMPEGAudDecMFT
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.AACDecoder">
            <summary>
            CMSAACDecMFT
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.WMAudioDecoder">
            <summary>
            CWMADecMediaObject
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.ALawDecoder">
            <summary>
            CALawDecMediaObject
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.GSMDecoder">
            <summary>
            ACM Wrapper
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.WMAProDecoder">
            <summary>
            CWMAudioSpdTxDMO
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.WMSpeechDecoder">
            <summary>
            CWMSPDecMediaObject
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.G711Decoder">
            <summary>
            Wrapper
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.ImaAdPcmDecoder">
            <summary>
            IMA ADPCM ACM Wrapper
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.MP3Decoder">
            <summary>
            CMP3DecMediaObject
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.AdPcmDecoder">
            <summary>
            ADPCM ACM Wrapper
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MediaFoundationAttributes">
            <summary>
            see http://msdn.microsoft.com/en-us/library/windows/desktop/ms696989%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationCore.EnumerateTransforms(System.Guid,CSCore.MediaFoundation.MFTEnumFlags)">
            <summary>
            </summary>
            <param name="category">See CSCore.MediaFoundation.MFTCategories</param>
        </member>
        <member name="T:CSCore.MediaFoundation.MediaFoundationEncoder">
            <summary>
            Provides encoding through the Mediafoundation.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateMP3Encoder(CSCore.WaveFormat,System.String,System.Int32)">
            <summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/hh162907(v=vs.85).aspx for supported input and output types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateMP3Encoder(CSCore.WaveFormat,System.IO.Stream,System.Int32)">
            <summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/hh162907(v=vs.85).aspx for supported input and output types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateWMAEncoder(CSCore.WaveFormat,System.String,System.Int32)">
            <summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/ff819498(v=vs.85).aspx for supported input and output types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateWMAEncoder(CSCore.WaveFormat,System.IO.Stream,System.Int32)">
            <summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/ff819498(v=vs.85).aspx for supported input and output types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateAACEncoder(CSCore.WaveFormat,System.String,System.Int32)">
            <summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/dd742785(v=vs.85).aspx for supported input and output types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateAACEncoder(CSCore.WaveFormat,System.IO.Stream,System.Int32)">
            <summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/dd742785(v=vs.85).aspx for supported input and output types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.#ctor(System.IO.Stream,CSCore.MediaFoundation.MFMediaType,CSCore.MediaFoundation.MFMediaType,System.Guid)">
            <summary>
            Creates an new instance of the MediaFoundationEncoder. 
            </summary>
            <param name="inputMediaType">Mediatype of the source which gets encoded.</param>
            <param name="stream">Stream which will be used to store the encoded data.</param>
            <param name="targetMediaType">The format, the data gets encoded to.</param>
            <param name="containerType">See TranscodeContainerTypes-class.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes raw data.
            </summary>
            <param name="buffer">Buffer which contains raw data to encode.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin encoding bytes to the underlying stream.</param>
            <param name="count">The number of bytes to encode.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.WriteBlock(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int64,System.Int32)">
            <returns>Ticks, NO BYTES!</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.Dispose">
            <summary>
            Releases all resources used by the encoder and finalizes encoding.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationEncoder.OutputMediaType">
            <summary>
            Gets the  OutputMediaType.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationEncoder.EncodedDuration">
            <summary>
            Gets the total length of all encoded data.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MFAttributes">
            <summary>
            Provides a generic way to store key/value pairs on an object. The keys are GUIDs, and the values can be any of the following data types: UINT32, UINT64, double, GUID, wide-character string, byte array, or IUnknown pointer. The standard implementation of this interface holds a thread lock while values are added, deleted, or retrieved.
            For a list of predefined attribute GUIDs, see Media Foundation Attributes. Each attribute GUID has an expected data type. The various "set" methods in IMFAttributes do not validate the type against the attribute GUID. It is the application's responsibility to set the correct type for the attribute.
            To create an empty attribute store, call MFCreateAttributes.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItem(System.Guid,System.IntPtr)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItemType(System.Guid,CSCore.MediaFoundation.MFAttributeType@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItemType(System.Guid)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.CompareItem(System.Guid,CSCore.Win32.PropertyVariant,CSCore.Win32.NativeBool@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.Compare(CSCore.MediaFoundation.MFAttributes,CSCore.MediaFoundation.MFAttributeMatchType,CSCore.Win32.NativeBool@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUINT32(System.Guid)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUINT64(System.Guid)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetDouble(System.Guid)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetGuid(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetGuid(System.Guid)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetStringLength(System.Guid)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetString(System.Guid,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetString(System.Guid)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetAllocatedString(System.Guid,System.IntPtr,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the
            memory for the string.
            </summary>
            <returns>HRESULT</returns>
            <remarks>
            If the key is found and the value is a string type, this parameter receives a copy of
            the string. The caller must free the memory for the string by calling CoTaskMemFree.
            </remarks>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetBlobSize(System.Guid)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetBlob(System.Guid,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetAllocatedBlob(System.Guid,System.Byte[]@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the
            array.
            </summary>
            <returns>HRESULT</returns>
            <remarks>
            If the key is found and the value is a byte array, this parameter receives a copy of the
            array. The caller must free the memory for the array by calling CoTaskMemFree.
            </remarks>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUnknown(System.Guid,System.Guid,System.IntPtr@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetItemNative(System.Guid,CSCore.Win32.PropertyVariant)">
            <summary>
            Associates an attribute value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetItem(System.Guid,CSCore.Win32.PropertyVariant)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetGuid(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetBlob(System.Guid,System.IntPtr,System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetUnknown(System.Guid,System.IntPtr)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetCountNative(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetCount">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItemByIndexNative(System.Int32,System.Guid@,System.IntPtr)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItemByIndex(System.Int32,System.Guid@)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.CopyAllItems(CSCore.MediaFoundation.MFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="P:CSCore.MediaFoundation.MFAttributes.Count">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ActivateObjectNative(System.Guid,System.IntPtr@)">
            <summary>
            Creates the object associated with this activation object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ActivateObject``1(System.Guid)">
            <summary>
            Creates the object associated with this activation object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ActivateObject(System.Guid)">
            <summary>
            Creates the object associated with this activation object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ShutdownObjectNative">
            <summary>
            Shuts down the created object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ShutdownObject">
            <summary>
            Shuts down the created object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.DetachObjectNative">
            <summary>
            Detaches the created object from the activation object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.DetachObject">
            <summary>
            Detaches the created object from the activation object.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_AAC">
            <summary>
            Advanced Audio Coding (AAC).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_ADTS">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_Dolby_AC3_SPDIF">
            <summary>
            Dolby AC-3 audio over Sony/Philips Digital Interface (S/PDIF).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_DRM">
            <summary>
            Encrypted audio data used with secure audio path.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_DTS">
            <summary>
            Digital Theater Systems (DTS) audio.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_Float">
            <summary>
            Uncompressed IEEE floating-point audio.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_MP3">
            <summary>
            MPEG Audio Layer-3 (MP3).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_MPEG">
            <summary>
            MPEG-1 audio payload.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_MSP1">
            <summary>
            Windows Media Audio 9 Voice codec.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_PCM">
            <summary>
            Uncompressed PCM audio.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_WMASPDIF">
            <summary>
            Windows Media Audio 9 Professional codec over S/PDIF.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_WMAudio_Lossless">
            <summary>
            Windows Media Audio 9 Lossless codec or Windows Media Audio 9.1 codec.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_WMAudioV8">
            <summary>
            Windows Media Audio 8 codec, Windows Media Audio 9 codec, or Windows Media Audio 9.1 codec.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_WMAudioV9">
            <summary>
            Windows Media Audio 9 Professional codec or Windows Media Audio 9.1 Professional codec.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_Dolby_AC3">
            <summary>
            Dolby Digital (AC-3).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MEDIASUBTYPE_RAW_AAC1">
            <summary>
            MPEG-4 and AAC Audio Types
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MEDIASUBTYPE_DVM">
            <summary>
            Dolby Audio Types
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MEDIASUBTYPE_DOLBY_DDPLUS">
            <summary>
            Dolby Audio Types
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.KSDATAFORMAT_SUBTYPE_MULAW">
            <summary>
            μ-law coding
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.KSDATAFORMAT_SUBTYPE_ADPCM">
            <summary>
            Adaptive delta pulse code modulation (ADPCM)
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS">
            <summary>
            Dolby Digital Plus formatted for HDMI output.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MEDIASUBTYPE_MSAUDIO1">
            <summary>
            MSAudio1 - unknown meaning
            Reference : wmcodecdsp.h
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.ImaAdpcm">
            <summary>
            IMA ADPCM ACM Wrapper
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.WMMEDIASUBTYPE_WMSP2">
            <summary>
            WMSP2 - unknown meaning
            Reference: wmsdkidl.h
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.AddStreamNative(CSCore.MediaFoundation.MFMediaType,System.Int32@)">
            <summary>
            Adds a stream to the sink writer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.AddStream(CSCore.MediaFoundation.MFMediaType)">
            <summary>
            Adds a stream to the sink writer.
            </summary>
            <returns>The zero-based index of the new stream.</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.SetInputMediaTypeNative(System.Int32,CSCore.MediaFoundation.MFMediaType,CSCore.MediaFoundation.MFAttributes)">
            <summary>
            Sets the input format for a stream on the sink writer.
            </summary>
            <param name="encodingParameters">Optional</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.SetInputMediaType(System.Int32,CSCore.MediaFoundation.MFMediaType,CSCore.MediaFoundation.MFAttributes)">
            <summary>
            Sets the input format for a stream on the sink writer.
            </summary>
            <param name="encodingParameters">Optional</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.BeginWritingNative">
            <summary>
            Initializes the sink writer for writing.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.BeginWriting">
            <summary>
            Initializes the sink writer for writing.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.WriteSampleNative(System.Int32,CSCore.MediaFoundation.MFSample)">
            <summary>
            Delivers a sample to the sink writer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.WriteSample(System.Int32,CSCore.MediaFoundation.MFSample)">
            <summary>
            Delivers a sample to the sink writer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.SendStreamTickNative(System.Int32,System.Int64)">
            <summary>
            Indicates a gap in an input stream.
            </summary>
            <param name="timeStamp">The position in the stream where the gap in the data occurs. The value is given in 100-nanosecond units, relative to the start of the stream.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.SendStreamTick(System.Int32,System.Int64)">
            <summary>
            Indicates a gap in an input stream.
            </summary>
            <param name="timeStamp">The position in the stream where the gap in the data occurs. The value is given in 100-nanosecond units, relative to the start of the stream.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.PlaceMarkerNative(System.Int32,System.IntPtr)">
            <summary>
            Places a marker in the specified stream.
            </summary>
            <param name="context">Pointer to an application-defined value. The value of this parameter is returned to the caller in the pvContext parameter of the caller's IMFSinkWriterCallback::OnMarker callback method. The application is responsible for any memory allocation associated with this data. This parameter can be NULL.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.PlaceMarker(System.Int32,System.IntPtr)">
            <summary>
            Places a marker in the specified stream.
            </summary>
            <param name="context">Pointer to an application-defined value. The value of this parameter is returned to the caller in the pvContext parameter of the caller's IMFSinkWriterCallback::OnMarker callback method. The application is responsible for any memory allocation associated with this data. This parameter can be NULL.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.NotifyEndOfSegmentNative(System.Int32)">
            <summary>
            Notifies the media sink that a stream has reached the end of a segment.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.NotifyEndOfSegment(System.Int32)">
            <summary>
            Notifies the media sink that a stream has reached the end of a segment.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.FlushNative(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.Flush(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.FinalizeWritingNative">
            <summary>
            Completes all writing operations on the sink writer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.FinalizeWriting">
            <summary>
            Completes all writing operations on the sink writer.
            </summary>
            <remarks>Renamed from 'Finalize' to 'FinalizeWriting' to suppress "CS0465 warning".</remarks>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.GetServiceForStreamNative(System.Int32,System.Guid,System.Guid,System.IntPtr@)">
            <summary>
            Queries the underlying media sink or encoder for an interface.
            </summary>
            <param name="guidService">A service identifier GUID, or GUID_NULL. If the value is GUID_NULL, the method calls QueryInterface to get the requested interface. Otherwise, the method calls IMFGetService::GetService. For a list of service identifiers, see Service Interfaces( http://msdn.microsoft.com/en-us/library/windows/desktop/ms695350(v=vs.85).aspx ).</param>
            <param name="riid">The interface identifier (IID) of the interface being requested.</param>
            <param name="pObject">Receives a pointer to the requested interface. The caller must release the interface.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.GetServiceForStream(System.Int32,System.Guid,System.Guid)">
            <summary>
            Queries the underlying media sink or encoder for an interface.
            </summary>
            <param name="guidService">A service identifier GUID, or GUID_NULL. If the value is GUID_NULL, the method calls QueryInterface to get the requested interface. Otherwise, the method calls IMFGetService::GetService. For a list of service identifiers, see Service Interfaces( http://msdn.microsoft.com/en-us/library/windows/desktop/ms695350(v=vs.85).aspx ).</param>
            <param name="riid">The interface identifier (IID) of the interface being requested.</param>
            <returns>A pointer to the requested interface. The caller must release the interface.</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.GetStatisticsNative(System.Int32,CSCore.MediaFoundation.MFSinkWriterStatistics@)">
            <summary>
            Gets statistics about the performance of the sink writer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.GetStatistics(System.Int32)">
            <summary>
            Gets statistics about the performance of the sink writer.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.Cb">
            <summary>	
            The size of the structure, in bytes.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastTimestampReceived">
            <summary>	
            The time stamp of the most recent sample given to the sink writer. The sink writer updates this value each time the application calls <strong><see cref="M:SharpDX.MediaFoundation.SinkWriter.WriteSample(System.Int32,SharpDX.MediaFoundation.Sample)" /></strong>.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastTimestampEncoded">
            <summary>	
            The time stamp of the most recent sample to be encoded. The sink writer updates this value whenever it calls <strong><see cref="M:SharpDX.MediaFoundation.Transform.ProcessOutput(SharpDX.MediaFoundation.TransformProcessOutputFlags,System.Int32,SharpDX.MediaFoundation.TOutputDataBuffer,SharpDX.MediaFoundation.TransformProcessOutputStatus@)" /></strong> on the encoder.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastTimestampProcessed">
            <summary>	
            The time stamp of the most recent sample given to the media sink. The sink writer updates this value whenever it calls <strong><see cref="M:SharpDX.MediaFoundation.StreamSink.ProcessSample(SharpDX.MediaFoundation.Sample)" /></strong> on the media sink.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastStreamTickReceived">
            <summary>	
            The time stamp of the most recent stream tick. The sink writer updates this value whenever the application calls <strong><see cref="M:SharpDX.MediaFoundation.SinkWriter.SendStreamTick(System.Int32,System.Int64)" /></strong>.
            </summary>		
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastSinkSampleRequest">
            <summary>	
            The system time of the most recent sample request from the media sink. The sink writer updates this value whenever it receives an <see cref="F:SharpDX.MediaFoundation.MediaEventTypes.StreamSinkRequestSample" /> event from the media sink. The value is the current system time.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwNumSamplesReceived">
            <summary>	
            The number of samples received.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwNumSamplesEncoded">
            <summary>	
            The number of samples encoded.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwNumSamplesProcessed">
            <summary>	
            The number of samples given to the media sink.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwNumStreamTicksReceived">
            <summary>	
            The number of stream ticks received.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwByteCountQueued">
            <summary>	
            The amount of data, in bytes, currently waiting to be processed. 
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwByteCountProcessed">
            <summary>	
            The total amount of data, in bytes, that has been sent to the media sink.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwNumOutstandingSinkSampleRequests">
            <summary>	
            The number of pending sample requests.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwAverageSampleRateReceived">
            <summary>	
            The average rate, in media samples per 100-nanoseconds, at which the application sent samples to the sink writer.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwAverageSampleRateEncoded">
            <summary>	
            The average rate, in media samples per 100-nanoseconds, at which the sink writer sent samples to the encoder.
            </summary>		
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwAverageSampleRateProcessed">
            <summary>	
            The average rate, in media samples per 100-nanoseconds, at which the sink writer sent samples to the media sink.
            </summary>	
        </member>
        <member name="T:CSCore.MediaFoundation.MFTCategories">
            <summary>
            see http://msdn.microsoft.com/en-us/library/windows/desktop/dd388660(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTEnumFlags.FieldOfUse">
            <summary>
            Must be unlocked by the app before use.
            </summary>
        </member>
        <member name="T:CSCore.SoundIn.WasapiCapture">
            <summary>
            Provides audiocapture through Wasapi.
            Minimum supported OS: Windows Vista (see IsSupportedOnCurrentPlatform property).
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor">
            <summary>
            Creates a new WasapiCapture instance.
            CaptureThreadPriority = AboveNormal. 
            DefaultFormat = null. 
            Latency = 100ms. 
            EventSync = true.
            SharedMode = Shared.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode)">
            <summary>
            Creates a new WasapiCapture instance.
            CaptureThreadPriority = AboveNormal. 
            DefaultFormat = null.
            Latency = 100ms.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior. Don't use this in combination with exclusive mode.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, the device can only be used once on the whole system. Don't use exclusive mode in combination with eventSync.</param>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32)">
            <summary>
            Creates a new WasapiCapture instance.
            CaptureThreadPriority = AboveNormal. 
            DefaultFormat = null.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior. Don't use this in combination with exclusive mode.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, the device can only be used once on the whole system. Don't use exclusive mode in combination with eventSync.</param>
            <param name="latency">Latency of the capture specified in milliseconds.</param>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32,CSCore.WaveFormat)">
            <summary>
            Creates a new WasapiCapture instance.
            CaptureThreadPriority = AboveNormal.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior. Don't use this in combination with exclusive mode.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, the device can only be used once on the whole system. Don't use exclusive mode in combination with eventSync.</param>
            <param name="latency">Latency of the capture specified in milliseconds.</param>
            <param name="defaultFormat">The default WaveFormat to use for the capture. If this parameter is set to null, the best available format will be chosen automatically.</param>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32,CSCore.WaveFormat,System.Threading.ThreadPriority)">
            <summary>
            Creates a new WasapiCapture instance.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior. Don't use this in combination with exclusive mode.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, the device can only be used once on the whole system. Don't use exclusive mode in combination with eventSync.</param>
            <param name="latency">Latency of the capture specified in milliseconds.</param>
            <param name="captureThreadPriority">ThreadPriority of the capturethread which runs in background and provides the audiocapture itself.</param>
            <param name="defaultFormat">The default WaveFormat to use for the capture. If this parameter is set to null, the best available format will be chosen automatically.</param>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.Initialize">
            <summary>
            Initializes WasapiCapture and prepares all resources for recording.
            Note that properties like Device, etc. won't affect WasapiCapture after calling Initialize.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.Start">
            <summary>
            Start Recording.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.Stop">
            <summary>
            Stop Recording.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.Dispose">
            <summary>
            Stops the capture and frees all resources.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.IsSupportedOnCurrentPlatform">
            <summary>
            Gets whether Wasapi is supported on the current Platform.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.RecordingState">
            <summary>
            Gets the RecordingState.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.Device">
            <summary>
            Gets or sets the capture device to use.
            Set this property before calling Initialize.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.WaveFormat">
            <summary>
            Gets the OutputFormat.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.DebuggingID">
            <summary>
            Random ID based on internal audioclients memory address for debugging purposes. 
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.DirectSoundOut">
            <summary>
            Provides audioplayback through DirectSound.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.#ctor">
            <summary>
            Creates an new instance of DirectSoundOut. 
            Latency = 100.
            EventSyncContext = SynchronizationContext.Current. 
            PlaybackThreadPriority = AboveNormal.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.#ctor(System.Int32)">
            <summary>
            Creates an new instance of DirectSoundOut.
            EventSyncContext = SynchronizationContext.Current.
            PlaybackThreadPriority = AboveNormal.
            </summary>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.#ctor(System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Creates an new instance of DirectSoundOut. 
            EventSyncContext = SynchronizationContext.Current.
            </summary>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
            <param name="playbackThreadPriority">ThreadPriority of the playbackthread which runs in background and feeds the device with data.</param>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.#ctor(System.Int32,System.Threading.ThreadPriority,System.Threading.SynchronizationContext)">
            <summary>
            Creates an new instance of DirectSoundOut.
            </summary>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
            <param name="playbackThreadPriority">ThreadPriority of the playbackthread which runs in background and feeds the device with data.</param>
            <param name="eventSyncContext">The synchronizationcontext which is used to raise any events like the "Stopped"-event. If the passed value is not null, the events will be called async through the SynchronizationContext.Post() method.</param>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Initialize(CSCore.IWaveSource)">
            <summary>
            Initializes DirectSoundOut and prepares all resources for playback.
            Note that all properties like Device, Latency,... won't affectDirectSoundOut after calling Initialize.
            </summary>
            <param name="source">The source to prepare for playback.</param>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Play">
            <summary>
            Starts the playback.
            Note: Initialize has to get called before calling Play. 
            If PlaybackState is Paused, Resume() will be called automatically. 
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Stop">
            <summary>
            Stops the playback and frees all allocated resources. 
            After calling the caller has to call Initialize again before another playback can be started.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Resume">
            <summary>
            Resumes the paused playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Pause">
            <summary>
            Pauses the playback.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.PlaybackState">
            <summary>
            Gets the current PlaybackState of the playback.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.DebuggingID">
            <summary>
            Random ID based on the internal directsounds memory address for debugging purposes.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.Volume">
            <summary>
            The volume of the playback. Valid values are from 0.0 (0%) to 1.0 (100%).
            </summary>
            <remarks>
            Note that the if you for example set a volume of 33% => 0.33, the actual volume will be something like 0.33039999.
            </remarks>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.WaveSource">
            <summary>
            The currently initialized source.
            To change the WaveSource property, call Initialize().
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.Latency">
            <summary>
            Latency of the playback specified in milliseconds.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_1M08">
            <summary>
            11. 025 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_1S08">
            <summary>
            11. 025 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_1M16">
            <summary>
            11. 025 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_1S16">
            <summary>
            11. 025 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_2M08">
            <summary>
            22. 05 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_2S08">
            <summary>
            22. 05 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_2M16">
            <summary>
            22. 05 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_2S16">
            <summary>
            22. 05 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_4M08">
            <summary>
            44. 1 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_4S08">
            <summary>
            44. 1 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_4M16">
            <summary>
            44. 1 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_4S16">
            <summary>
            44. 1 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_44M08">
            <summary>
            44. 1 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_44S08">
            <summary>
            44. 1 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_44M16">
            <summary>
            44. 1 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_44S16">
            <summary>
            44. 1 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_48M08">
            <summary>
            48 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_48S08">
            <summary>
            48 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_48M16">
            <summary>
            48 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_48S16">
            <summary>
            48 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_96M08">
            <summary>
            96 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_96S08">
            <summary>
            96 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_96M16">
            <summary>
            96 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_96S16">
            <summary>
            96 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.WasapiOut">
            <summary>
            Provides audioplayback through Wasapi.
            Minimum supported OS: Windows Vista (see IsSupportedOnCurrentPlatform property).
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.#ctor">
            <summary>
            Creates a new WasapiOut instance. 
            EventSyncContext = SynchronizationContext.Current. 
            PlaybackThreadPriority = AboveNormal. 
            Latency = 100ms. 
            EventSync = False. 
            ShareMode = Shared. 
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32)">
            <summary>
            Creates a new WasapiOut instance. 
            EventSyncContext = SynchronizationContext.Current. 
            PlaybackThreadPriority = AboveNormal.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, only one single playback for the specified device is possible at once.</param>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Creates a new WasapiOut instance. 
            EventSyncContext = SynchronizationContext.Current.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, only one single playback for the specified device is possible at once.</param>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
            <param name="playbackThreadPriority">ThreadPriority of the playbackthread which runs in background and feeds the device with data.</param>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32,System.Threading.ThreadPriority,System.Threading.SynchronizationContext)">
            <summary>
            Creates a new WasapiOut instance.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, only one single playback for the specified device is possible at once.</param>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
            <param name="playbackThreadPriority">ThreadPriority of the playbackthread which runs in background and feeds the device with data.</param>
            <param name="eventSyncContext">The synchronizationcontext which is used to raise any events like the "Stopped"-event. If the passed value is not null, the events will be called async through the SynchronizationContext.Post() method.</param>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Initialize(CSCore.IWaveSource)">
            <summary>
            Initializes WasapiOut and prepares all resources for playback.
            Note that properties like Device, Latency,... won't affect WasapiOut after calling Initialize.
            </summary>
            <param name="source">The source to prepare for playback.</param>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Play">
            <summary>
            Starts the playback.
            Note: Initialize has to get called before calling Play. 
            If PlaybackState is Paused, Resume() will be called automatically. 
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Stop">
            <summary>
            Stops the playback and frees all allocated resources. 
            After calling the caller has to call Initialize again before another playback can be started.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Resume">
            <summary>
            Resumes the paused playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Pause">
            <summary>
            Pauses the playback.
            </summary>
        </member>
        <member name="E:CSCore.SoundOut.WasapiOut.Stopped">
            <summary>
            Thrown whenever Stop is called or the source goes end of stream.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.IsSupportedOnCurrentPlatform">
            <summary>
            Gets whether Wasapi is supported on the current Platform.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.Device">
            <summary>
            Gets or sets the Device which should be used for playback. 
            The Device property has to be set before initializing. The systems default playback device is used as default value of the Device property.
            </summary>
            <remarks>
            Be sure to set only activated render devices.
            </remarks>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.PlaybackState">
            <summary>
            Gets the current PlaybackState of the playback.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.DebuggingID">
            <summary>
            Random ID based on internal audioclients memory address for debugging purposes. 
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.Volume">
            <summary>
            Gets or sets the volume of the playback. 
            Valid values are in the range from 0.0 to 1.0. 1.0 equals 100%. 
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.Latency">
            <summary>
            Latency of the playback specified in milliseconds.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.WaveSource">
            <summary>
            The currently initialized source.
            To change the WaveSource property, call Initialize().
            </summary>
            <remarks>
            The value of the WaveSource might not be the value which was passed to the Initialize method, because
            WasapiOut (depending on the waveformat of the source) has to use a DmoResampler.
            </remarks>
        </member>
        <member name="T:CSCore.Streams.WriteableBufferingSource">
            <summary>
            Buffered WaveSource with provides overrides the allocated memory after the buffer got full. 
            To specify the the buffersize, specify the bufferSize parameter in the constructor.
            </summary>
        </member>
        <member name="M:CSCore.Streams.WriteableBufferingSource.#ctor(CSCore.WaveFormat)">
            <summary>
            Creates an new instance of the WriteableBufferingSource class with a default Buffersize of 5 seconds.
            </summary>
            <param name="waveFormat">The WaveFormat of the source.</param>
        </member>
        <member name="M:CSCore.Streams.WriteableBufferingSource.#ctor(CSCore.WaveFormat,System.Int32)">
            <summary>
            Creates an new instance of the WriteableBufferingSource class.
            </summary>
            <param name="waveFormat">The WaveFormat of the source.</param>
            <param name="bufferSize">Buffersize in bytes</param>
        </member>
        <member name="M:CSCore.Streams.BufferSource.#ctor(CSCore.IWaveSource,System.Int32)">
            <param name="source"></param>
            <param name="bufferSize">Buffersize in bytes.</param>
        </member>
        <member name="M:CSCore.Streams.EqFilter.Process(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="channel">zero based channel index</param>
            <param name="channelCount"></param>
        </member>
        <member name="P:CSCore.Streams.EqFilterEntry.Filters">
            <summary>
            Key: Channel; Value: Filter
            </summary>
        </member>
        <member name="P:CSCore.Streams.SingleBlockReadEventArgs.Samples">
            <summary>
            Do not use this in combination with mono or stereo
            </summary>
        </member>
        <member name="T:CSCore.Win32.ComStream">
            <summary>
            see http://msdn.microsoft.com/en-us/library/windows/desktop/ms752876(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.RegisterControlChangeNotifyNative(CSCore.CoreAudioAPI.IAudioEndpointVolumeCallback)">
            <summary>
            The RegisterControlChangeNotify method registers a client's notification callback
            interface.
            </summary>
            <param name="notify">Notificationprovider</param>
            <returns>HRESULT</returns>
            <remarks>
            When notifications are no longer needed, the client can call the
            IAudioEndpointVolume::UnregisterControlChangeNotify method to terminate the
            notifications.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.RegisterControlChangeNotify(CSCore.CoreAudioAPI.IAudioEndpointVolumeCallback)">
            <summary>
            The RegisterControlChangeNotify method registers a client's notification callback
            interface.
            </summary>
            <param name="notify">Notificationprovider</param>
            <remarks>
            When notifications are no longer needed, the client can call the
            IAudioEndpointVolume::UnregisterControlChangeNotify method to terminate the
            notifications.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.UnregisterControlChangeNotifyNative(CSCore.CoreAudioAPI.IAudioEndpointVolumeCallback)">
            <summary>
            The UnregisterControlChangeNotify method deletes the registration of a client's
            notification callback interface that the client registered in a previous call to the
            IAudioEndpointVolume::RegisterControlChangeNotify method.
            </summary>
            <param name="notify">Notificationprovider</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.UnregisterControlChangeNotify(CSCore.CoreAudioAPI.IAudioEndpointVolumeCallback)">
            <summary>
            The UnregisterControlChangeNotify method deletes the registration of a client's
            notification callback interface that the client registered in a previous call to the
            IAudioEndpointVolume::RegisterControlChangeNotify method.
            </summary>
            <param name="notify">Notificationprovider</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelCountNative(System.UInt32@)">
            <summary>
            The GetChannelCount method gets a count of the channels in the audio stream that enters
            or leaves the audio endpoint device.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelCount">
            <summary>
            The GetChannelCount method gets a count of the channels in the audio stream that enters
            or leaves the audio endpoint device.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevelNative(System.Single,System.Guid)">
            <summary>
            The SetMasterVolumeLevel method sets the master volume level, in decibels, of the audio
            stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">The new master volume level in decibels. To obtain the range and
            granularity of the volume levels that can be set by this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevel(System.Single,System.Guid)">
            <summary>
            The SetMasterVolumeLevel method sets the master volume level, in decibels, of the audio
            stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">The new master volume level in decibels. To obtain the range and
            granularity of the volume levels that can be set by this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevelScalarNative(System.Single,System.Guid)">
            <summary>
            The SetMasterVolumeLevelScalar method sets the master volume level of the audio stream
            that enters or leaves the audio endpoint device. The volume level is expressed as a
            normalized, audio-tapered value in the range from 0.0 to 1.0.
            </summary>
            <param name="level">The new master volume level. The level is expressed as a normalized
            value in the range from 0.0 to 1.0.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevelScalar(System.Single,System.Guid)">
            <summary>
            The SetMasterVolumeLevelScalar method sets the master volume level of the audio stream
            that enters or leaves the audio endpoint device. The volume level is expressed as a
            normalized, audio-tapered value in the range from 0.0 to 1.0.
            </summary>
            <param name="level">The new master volume level. The level is expressed as a normalized
            value in the range from 0.0 to 1.0.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevelNative(System.Single@)">
            <summary>
            The GetMasterVolumeLevel method gets the master volume level, in decibels, of the audio
            stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">Pointer to the master volume level. This parameter points to a
            float variable into which the method writes the volume level in decibels. To get the
            range of volume levels obtained from this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevel">
            <summary>
            The GetMasterVolumeLevel method gets the master volume level, in decibels, of the audio
            stream that enters or leaves the audio endpoint device.
            </summary>
            <returns>Volume level in decibels. To get the range of volume levels obtained from this
            method, call the IAudioEndpointVolume::GetVolumeRange method.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevelScalarNative(System.Single@)">
            <summary>
            The GetMasterVolumeLevelScalar method gets the master volume level of the audio stream
            that enters or leaves the audio endpoint device. The volume level is expressed as a
            normalized, audio-tapered value in the range from 0.0 to 1.0.
            </summary>
            <param name="level">Pointer to the master volume level. This parameter points to a float
            variable into which the method writes the volume level. The level is expressed as a
            normalized value in the range from 0.0 to 1.0.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevelScalar">
            <summary>
            The GetMasterVolumeLevelScalar method gets the master volume level of the audio stream
            that enters or leaves the audio endpoint device. The volume level is expressed as a
            normalized, audio-tapered value in the range from 0.0 to 1.0.
            </summary>
            <returns>Volume level. The level is expressed as a normalized value in the range from
            0.0 to 1.0.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetChannelVolumeLevelNative(System.UInt32,System.Single,System.Guid)">
            <summary>
            The SetChannelVolumeLevel method sets the volume level, in decibels, of the specified
            channel of the audio stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">The new volume level in decibels. To obtain the range and
            granularity of the volume levels that can be set by this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetChannelVolumeLevel(System.UInt32,System.Single,System.Guid)">
            <summary>
            The SetChannelVolumeLevel method sets the volume level, in decibels, of the specified
            channel of the audio stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">The new volume level in decibels. To obtain the range and
            granularity of the volume levels that can be set by this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetChannelVolumeLevelScalarNative(System.UInt32,System.Single,System.Guid)">
            <summary>
            The SetChannelVolumeLevelScalar method sets the normalized, audio-tapered volume level
            of the specified channel in the audio stream that enters or leaves the audio endpoint
            device.
            </summary>
            <param name="level">The volume level. The volume level is expressed as a normalized
            value in the range from 0.0 to 1.0.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetChannelVolumeLevelScalar(System.UInt32,System.Single,System.Guid)">
            <summary>
            The SetChannelVolumeLevelScalar method sets the normalized, audio-tapered volume level
            of the specified channel in the audio stream that enters or leaves the audio endpoint
            device.
            </summary>
            <param name="level">The volume level. The volume level is expressed as a normalized
            value in the range from 0.0 to 1.0.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelVolumeLevelNative(System.UInt32,System.Single@)">
            <summary>
            The GetChannelVolumeLevel method gets the volume level, in decibels, of the specified
            channel in the audio stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">Pointer to a float variable into which the method writes the
            volume level in decibels. To get the range of volume levels obtained from this method,
            call the IAudioEndpointVolume::GetVolumeRange method.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelVolumeLevel(System.UInt32)">
            <summary>
            The GetChannelVolumeLevel method gets the volume level, in decibels, of the specified
            channel in the audio stream that enters or leaves the audio endpoint device.
            </summary>
            <returns>Volume level in decibels. To get the range of volume levels obtained from this
            method, call the IAudioEndpointVolume::GetVolumeRange method.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelVolumeLevelScalarNative(System.UInt32,System.Single@)">
            <summary>
            The GetChannelVolumeLevelScalar method gets the normalized, audio-tapered volume level
            of the specified channel of the audio stream that enters or leaves the audio endpoint
            device.
            </summary>
            <param name="level">Pointer to a float variable into which the method writes the volume
            level. The level is expressed as a normalized value in the range from 0.0 to
            1.0.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelVolumeLevelScalar(System.UInt32)">
            <summary>
            The GetChannelVolumeLevelScalar method gets the normalized, audio-tapered volume level
            of the specified channel of the audio stream that enters or leaves the audio endpoint
            device.
            </summary>
            <returns>Volume level of a specific channel. The level is expressed as a normalized
            value in the range from 0.0 to 1.0.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMuteNative(CSCore.Win32.NativeBool,System.Guid)">
            <summary>
            The SetMute method sets the muting state of the audio stream that enters or leaves the
            audio endpoint device.
            </summary>
            <param name="mute">True mutes the stream. False turns off muting.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMute(System.Boolean,System.Guid)">
            <summary>
            The SetMute method sets the muting state of the audio stream that enters or leaves the
            audio endpoint device.
            </summary>
            <param name="mute">True mutes the stream. False turns off muting.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMuteNative(CSCore.Win32.NativeBool@)">
            <summary>
            The GetMute method gets the muting state of the audio stream that enters or leaves the
            audio endpoint device.
            </summary>
            <param name="mute">True = Stream is muted. False = Stream is not muted.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMute">
            <summary>
            The GetMute method gets the muting state of the audio stream that enters or leaves the
            audio endpoint device.
            </summary>
            <returns>True = Stream is muted. False = Stream is not muted.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetVolumeStepInfoNative(System.UInt32@,System.UInt32@)">
            <summary>
            The GetVolumeStepInfo method gets information about the current step in the volume
            range.
            </summary>
            <param name="currentStep">Current stepindex. This value is a value in the range from 0
            to stepCount.</param>
            <param name="stepCount">Number of steps in the volume range.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetVolumeStepInfo(System.UInt32@,System.UInt32@)">
            <summary>
            The GetVolumeStepInfo method gets information about the current step in the volume
            range.
            </summary>
            <param name="currentStep">Current stepindex. This value is a value in the range from 0
            to stepCount.</param>
            <param name="stepCount">Number of steps in the volume range.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.VolumeStepUpNative(System.Guid)">
            <summary>
            The VolumeStepUp method increments, by one step, the volume level of the audio stream
            that enters or leaves the audio endpoint device.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.VolumeStepUp(System.Guid)">
            <summary>
            The VolumeStepUp method increments, by one step, the volume level of the audio stream
            that enters or leaves the audio endpoint device.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.VolumeStepDownNative(System.Guid)">
            <summary>
            The VolumeStepDown method decrements, by one step, the volume level of the audio stream
            that enters or leaves the audio endpoint device.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.VolumeStepDown(System.Guid)">
            <summary>
            The VolumeStepDown method decrements, by one step, the volume level of the audio stream
            that enters or leaves the audio endpoint device.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.QueryHardwareSupportNative(CSCore.CoreAudioAPI.EndpointHardwareSupport@)">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.QueryHardwareSupport">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetVolumeRangeNative(System.Single@,System.Single@,System.Single@)">
            <summary>
            The GetVolumeRange method gets the volume range, in decibels, of the audio stream that
            enters or leaves the audio endpoint device.
            </summary>
            <param name="volumeMinDB">Minimum volume level in decibels. This value remains constant
            for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <param name="volumeMaxDB">Maximum volume level in decibels. This value remains constant
            for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <param name="volumeIncrementDB">Volume increment in decibels. This increment remains
            constant for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <returns>HREUSLT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetVolumeRange(System.Single@,System.Single@,System.Single@)">
            <summary>
            The GetVolumeRange method gets the volume range, in decibels, of the audio stream that
            enters or leaves the audio endpoint device.
            </summary>
            <param name="volumeMinDB">Minimum volume level in decibels. This value remains constant
            for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <param name="volumeMaxDB">Maximum volume level in decibels. This value remains constant
            for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <param name="volumeIncrementDB">Volume increment in decibels. This increment remains
            constant for the lifetime of the IAudioEndpointVolume interface instance.</param>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolume.ChannelCount">
            <summary>
            Gets the number of available channels. <seealso cref="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelCount"/>
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolume.MasterVolumeLevel">
            <summary>
            Gets or sets the MasterVolumeLevel in decibel.
            <seealso cref="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevel"/>
            <seealso cref="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevel(System.Single,System.Guid)"/>
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolume.MasterVolumeLevelScalar">
            <summary>
            Gets or sets the MasterVolumeLevel as a normalized value in the range from 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolumeCallbackEventArgs.MasterVolume">
            <summary>
            Specifies the current master volume level of the audio stream. The volume level is
            normalized to the range from 0.0 to 1.0, where 0.0 is the minimum volume level and 1.0
            is the maximum level. Within this range, the relationship of the normalized volume level
            to the attenuation of signal amplitude is described by a nonlinear, audio-tapered curve.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolumeCallbackEventArgs.ChannelVolumes">
            <summary>
            The volume level for each channel is normalized to the range from 0.0 to 1.0, where 0.0
            is the minimum volume level and 1.0 is the maximum level. Within this range, the
            relationship of the normalized volume level to the attenuation of signal amplitude is
            described by a nonlinear, audio-tapered curve.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.GetBuffer(System.Int32)">
            <summary>
            Retrieves a pointer to the next available space in the rendering endpoint buffer into
            which the caller can write a data packet.
            </summary>
            <returns>Buffer</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.GetBuffer(System.Int32,System.IntPtr@)">
            <summary>
            Retrieves a pointer to the next available space in the rendering endpoint buffer into
            which the caller can write a data packet.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.ReleaseBufferInternal(System.Int32,CSCore.CoreAudioAPI.AudioClientBufferFlags)">
            <summary>
            The ReleaseBuffer method releases the buffer space acquired in the previous call to the
            IAudioRenderClient::GetBuffer method.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.ReleaseBuffer(System.Int32,CSCore.CoreAudioAPI.AudioClientBufferFlags)">
            <summary>
            The ReleaseBuffer method releases the buffer space acquired in the previous call to the
            IAudioRenderClient::GetBuffer method.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioClientBufferFlags">
            <summary>
            Defines flags that indicate the status of an audio endpoint buffer.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientBufferFlags.DataDiscontinuity">
            <summary>
            The data in the packet is not correlated with the previous packet's device position;
            this is possibly due to a stream state transition or timing glitch.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientBufferFlags.Silent">
            <summary>
            Treat all of the data in the packet as silence and ignore the actual data values.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientBufferFlags.TimestampError">
            <summary>
            The time at which the device's stream position was recorded is uncertain. Thus, the
            client might be unable to accurately set the time stamp for the current data packet.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioVolumeNotificationData">
            <summary>
            see http://msdn.microsoft.com/en-us/library/dd370799(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioClient">
            <summary>
            Wrapper of the IAudioClient-Interface. For more details see
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370865(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClient.IID_IAudioClient">
            <summary>
            IID of the IAudioClient-interface.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.InitializeNative(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.CoreAudioAPI.AudioClientStreamFlags,System.Int64,System.Int64,CSCore.WaveFormat,System.Guid)">
            <summary>
            The Initialize method initializes the audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.Initialize(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.CoreAudioAPI.AudioClientStreamFlags,System.Int64,System.Int64,CSCore.WaveFormat,System.Guid)">
            <summary>
            The Initialize method initializes the audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetBufferSize(System.UInt32@)">
            <summary>
            The GetBufferSize method retrieves the size (maximum capacity) of the endpoint buffer.
            </summary>
            <remarks>
            The length is expressed as the number of audio frames the buffer can hold. The size in
            bytes of an audio frame is calculated as the number of channels in the stream multiplied
            by the sample size per channel. For example, the frame size is four bytes for a stereo
            (2-channel) stream with 16-bit samples.
            </remarks>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetBufferSize">
            <summary>
            The GetBufferSize method retrieves the size (maximum capacity) of the endpoint buffer.
            </summary>
            ///
            <remarks>
            The length is expressed as the number of audio frames the buffer can hold. The size in
            bytes of an audio frame is calculated as the number of channels in the stream multiplied
            by the sample size per channel. For example, the frame size is four bytes for a stereo
            (2-channel) stream with 16-bit samples.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetStreamLatency(System.Int64@)">
            <summary>
            The GetStreamLatency method retrieves the maximum latency for the current stream and can
            be called any time after the stream has been initialized.
            </summary>
            <remarks>
            Rendering clients can use this latency value to compute the minimum amount of data that
            they can write during any single processing pass. To write less than this minimum is to
            risk introducing glitches into the audio stream. For more information, see
            IAudioRenderClient::GetBuffer.
            </remarks>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetStreamLatency">
            <summary>
            The GetStreamLatency method retrieves the maximum latency for the current stream and can
            be called any time after the stream has been initialized.
            </summary>
            <remarks>
            Rendering clients can use this latency value to compute the minimum amount of data that
            they can write during any single processing pass. To write less than this minimum is to
            risk introducing glitches into the audio stream. For more information, see
            IAudioRenderClient::GetBuffer.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetCurrentPadding(System.UInt32@)">
            <summary>
            The GetCurrentPadding method retrieves the number of frames of padding in the endpoint
            buffer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.IsFormatSupportedNative(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.WaveFormat,CSCore.WaveFormatExtensible@)">
            <summary>
            The IsFormatSupportedInternal method indicates whether the audio endpoint device
            supports a particular stream format.
            </summary>
            <returns>For exclusive mode, IsFormatSupportedInternal returns S_OK if the audio
            endpoint device supports the caller-specified format, or it returns
            AUDCLNT_E_UNSUPPORTED_FORMAT if the device does not support the format. The
            ppClosestMatch parameter can be NULL. If it is not NULL, the method writes NULL to
            *ppClosestMatch. For shared mode, if the audio engine supports the caller-specified
            format, IsFormatSupportedInternal sets *ppClosestMatch to NULL and returns S_OK. If the
            audio engine does not support the caller-specified format but does support a similar
            format, the method retrieves the similar format through the ppClosestMatch parameter and
            returns S_FALSE. If the audio engine does not support the caller-specified format or any
            similar format, the method sets *ppClosestMatch to NULL and returns
            AUDCLNT_E_UNSUPPORTED_FORMAT.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.IsFormatSupported(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.WaveFormat,CSCore.WaveFormatExtensible@)">
            <summary>
            Checks whether the audio endpoint device supports a particular stream format.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.IsFormatSupported(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.WaveFormat)">
            <summary>
            Checks whether the audio endpoint device supports a particular stream format.
            </summary>
            <param name="shareMode"></param>
            <param name="waveFormat"></param>
            <returns></returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetMixFormat(CSCore.WaveFormat@)">
            <summary>
            The GetMixFormat method retrieves the stream format that the audio engine uses for its
            internal processing of shared-mode streams.
            </summary>
            <remarks>
            </remarks>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetMixFormat">
            <summary>
            The GetMixFormat method retrieves the stream format that the audio engine uses for its
            internal processing of shared-mode streams.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetDevicePeriod(System.Int64@,System.Int64@)">
            <summary>
            The GetDevicePeriod method retrieves the length of the periodic interval separating
            successive processing passes by the audio engine on the data in the endpoint buffer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.StartNative">
            <summary>
            The Start method starts the audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.StopNative">
            <summary>
            The Stop method stops the audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.ResetNative">
            <summary>
            The Reset method resets the audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.SetEventHandleNative(System.IntPtr)">
            <summary>
            The SetEventHandle method sets the event handle that the system signals when an audio
            buffer is ready to be processed by the client.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.SetEventHandle(System.IntPtr)">
            <summary>
            The SetEventHandle method sets the event handle that the system signals when an audio
            buffer is ready to be processed by the client.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetServiceNative(System.Guid,System.IntPtr@)">
            <summary>
            The GetService method accesses additional services from the audio client object. Fore
            more details see
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370873(v=vs.85).aspx
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetService(System.Guid)">
            <summary>
            The GetService method accesses additional services from the audio client object. Fore
            more details see
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370873(v=vs.85).aspx
            </summary>
            <remarks>
            For a few services, there are already existing classes with static
            "FromAudioClient"-Methods like AudioRenderClient::FromAudioClient.
            </remarks>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioClientShareMode">
            <summary>
            AudioClient share mode
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientShareMode.Shared">
            <summary>
            The device will be opened in shared mode and use the WAS format.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientShareMode.Exclusive">
            <summary>
            The device will be opened in exclusive mode and use the application specified format.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.SimpleAudioVolume.SetMasterVolumeInternal(System.Single,System.Guid)">
            <summary>
            The SetMasterVolume method sets the master volume level for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.SimpleAudioVolume.GetMasterVolumeInternal(System.Single@)">
            <summary>
            The GetMasterVolume method retrieves the client volume level for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.SimpleAudioVolume.SetMuteInternal(CSCore.Win32.NativeBool,System.Guid)">
            <summary>
            The SetMute method sets the muting state for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.SimpleAudioVolume.GetMuteInternal(CSCore.Win32.NativeBool@)">
            <summary>
            The GetMute method retrieves the current muting state for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="P:CSCore.CoreAudioAPI.SimpleAudioVolume.MasterVolume">
            <summary>
            Gets or sets the master volume level for the audio session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.SimpleAudioVolume.IsMuted">
            <summary>
            Gets or sets the muting state for the audio session.
            </summary>
        </member>
        <member name="T:CSCore.DMO.MediaBuffer">
            <summary>
            http: //msdn.microsoft.com/en-us/library/windows/desktop/dd376684(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.MajorType">
            <summary>
            A GUID identifying the stream's major media type. This must be one of the DMO Media
            Types(see http://msdn.microsoft.com/en-us/library/aa924843.aspx).
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.SubType">
            <summary>
            Subtype GUID of the stream.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.FixedSizeSamples">
            <summary>
            If TRUE, samples are of a fixed size. This field is informational only. For audio, it is
            generally set to TRUE. For video, it is usually TRUE for uncompressed video and FALSE
            for compressed video.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.TemporalCompression">
            <summary>
            If TRUE, samples are compressed using temporal (interframe) compression. A value of TRUE
            indicates that not all frames are key frames. This field is informational only.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.SampleSize">
            <summary>
            Size of the sample, in bytes. For compressed data, the value can be zero.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.FormatType">
            <summary>
            GUID specifying the format type. The pbFormat member points to the corresponding format
            structure.(see http://msdn.microsoft.com/en-us/library/aa929922.aspx)
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.CbFormat">
            <summary>
            Size of the format block of the media type.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.PtrFormat">
            <summary>
            Pointer to the format structure. The structure type is specified by the formattype
            member. The format structure must be present, unless formattype is GUID_NULL or
            FORMAT_None.
            </summary>
        </member>
        <member name="M:CSCore.DMO.WMResamplerProps.SetHalfFilterLength(System.Int32)">
            <summary>
            Specifies the quality of the output.
            </summary>
            <param name="quality">Specifies the quality of the output. The valid range is 1 to 60,
            inclusive.</param>
        </member>
        <member name="M:CSCore.DMO.WMResamplerProps.SetUserChannelMtx(System.Single[])">
            <summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/ff819252(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:CSCore.DMO.WMResamplerProps.SetHalfFilterLengthNative(System.Int32)">
            <summary>
            Specifies the quality of the output.
            </summary>
            <param name="quality">Specifies the quality of the output. The valid range is 1 to 60,
            inclusive.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.WMResamplerProps.SetUserChannelMtxNative(System.Single[])">
            <summary>
            http://msdn.microsoft.com/en-us/library/windows/desktop/ff819252(v=vs.85).aspx
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="T:CSCore.DSP.DmoResampler">
            <summary>
            Resampler based on the DmoResampler. Supportet since Windows XP
            </summary>
        </member>
        <member name="M:CSCore.DSP.DmoResampler.#ctor(CSCore.IWaveSource,System.Int32)">
            <summary>
            Resampler based on wavesource and new samplerate
            </summary>
            <param name="source">Source which has to get resampled</param>
            <param name="destSampleRate">Samplerate, the stream will be resampled to</param>
        </member>
        <member name="M:CSCore.DSP.DmoResampler.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes
            </summary>
            <returns>Read bytes</returns>
        </member>
        <member name="P:CSCore.DSP.DmoResampler.Quality">
            <summary>
            Specifies the quality of the output. The valid range is 1 to 60, inclusive.
            </summary>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.InputChannelCount">
            <summary>
            Equals Width <see cref="P:CSCore.DSP.ChannelMatrix.Width"/>
            </summary>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.OutputChannelCount">
            <summary>
            Equals Height <see cref="P:CSCore.DSP.ChannelMatrix.Height"/>
            </summary>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.Item(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="input">X Axis</param>
            <param name="output">Y Axis</param>
            <returns></returns>
        </member>
        <member name="T:CSCore.DSP.DmoChannelResampler">
            <summary>
            Resampler based on the DmoResampler. Supportet since Windows XP
            </summary>
        </member>
        <member name="M:CSCore.DSP.DmoChannelResampler.#ctor(CSCore.IWaveSource,CSCore.DSP.ChannelMatrix)">
            <summary>
            Resampler based on wavesource and new samplerate
            </summary>
            <param name="source">Source which has to get resampled</param>
            <param name="channelMatrix">Channelmatrix which contains information about the channel
            mapping.</param>
        </member>
        <member name="P:CSCore.CoreAudioAPI.MMDevice.PropertyStore">
            <summary>
            Warning: This PropertyStore is just Readable. Use the OpenPropertyStore-Method to get
                     writeable PropertyStore.
            </summary>
        </member>
        <member name="T:CSCore.Win32.PropertyStore">
            <summary>
            See "Functiondiscoverykeys_devpkey.h" for different keys like FriendlyName, DeviceDesc,...
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:CSCore.MediaFoundation.MFMediaType.GetMajorType(System.Guid@)" ignoriert -->
        <member name="M:CSCore.MediaFoundation.MFMediaType.GetMajorType">
            <summary>
            Gets the major type of the format.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.IsCompressedFormat(CSCore.Win32.NativeBool@)">
            <summary>
            Queries whether the media type is a temporally compressed format. Temporal compression
            uses information from previously decoded samples when decompressing the current sample.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.IsCompressedFormat">
            <summary>
            Queries whether the media type is a temporally compressed format. Temporal compression
            uses information from previously decoded samples when decompressing the current sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.IsEqual(CSCore.MediaFoundation.MFMediaType,CSCore.MediaFoundation.MediaTypeEqualFlags@)">
            <summary>
            Compares two media types and determines whether they are identical. If they are not
            identical, the method indicates how the two formats differ.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.IsEqual(CSCore.MediaFoundation.MFMediaType)">
            <summary>
            Compares two media types and determines whether they are identical. If they are not
            identical, the method indicates how the two formats differ.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.GetRepresentation(System.Guid,System.IntPtr@)">
            <summary>
            Retrieves an alternative representation of the media type. Currently only the DirectShow
            AM_MEDIA_TYPE structure is supported.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.GetRepresentation(System.Guid)">
            <summary>
            Retrieves an alternative representation of the media type. Currently only the DirectShow
            AM_MEDIA_TYPE structure is supported.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.FreeRepresentationNative(System.Guid,System.IntPtr)">
            <summary>
            Frees memory that was allocated by the IMFMediaType::GetRepresentation method.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.FreeRepresentation(System.Guid,System.IntPtr)">
            <summary>
            Frees memory that was allocated by the IMFMediaType::GetRepresentation method.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.Channels">
            <summary>
            Number of channels
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.BitsPerSample">
            <summary>
            Bits per sample
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.SampleRate">
            <summary>
            Samples per second(for one channel each)
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.AverageBytesPerSecond">
            <summary>
            AVG bytes per second
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.SubType">
            <summary>
            Audiosubtype
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.MajorType">
            <summary>
            Majortype
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.IsCompressed">
            <summary>
            Queries whether the media type is a temporally compressed format. Temporal compression
            uses information from previously decoded samples when decompressing the current sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.GetSampleFlagsNative(CSCore.MediaFoundation.MFSampleFlags@)">
            <summary>
            Currently no flags are defined. Instead, metadata for samples is defined using
            attributes. To get attibutes from a sample, use the IMFAttributes interface, which
            IMFSample inherits.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.GetSampleFlags">
            <summary>
            Currently no flags are defined. Instead, metadata for samples is defined using
            attributes. To get attibutes from a sample, use the IMFAttributes interface, which
            IMFSample inherits.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.SetSampleFlagsNative(CSCore.MediaFoundation.MFSampleFlags)">
            <summary>
            Currently no flags are defined. Instead, metadata for samples is defined using
            attributes. To set attibutes on a sample, use the IMFAttributes interface, which
            IMFSample inherits.
            </summary>
            <param name="flags">must be zero</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.SetSampleFlags(CSCore.MediaFoundation.MFSampleFlags)">
            <summary>
            Currently no flags are defined. Instead, metadata for samples is defined using
            attributes. To set attibutes on a sample, use the IMFAttributes interface, which
            IMFSample inherits.
            </summary>
            <param name="flags">must be zero</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.GetSampleTimeNative(System.Int64@)">
            <summary>
            Retrieves the presentation time of the sample.
            </summary>
            <param name="hnsSampleTime">Presentation time, in 100-nanosecond units.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.GetSampleTime">
            <summary>
            Retrieves the presentation time of the sample.
            </summary>
            <returns>Presentation time, in 100-nanosecond units.</returns>
        </member>
        <member name="T:CSCore.MediaFoundation.MFSampleFlags">
            <summary>
            Currently no flags are defined.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetStreamSelectionNative(System.Int32,CSCore.Win32.NativeBool@)">
            <summary>
            Queries whether a stream is selected.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:CSCore.MediaFoundation.MFSourceReader.GetStreamSelection(System.Int32)" ignoriert -->
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetStreamSelectionNative(System.Int32,CSCore.Win32.NativeBool)">
            <summary>
            Selects or deselects one or more streams.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetStreamSelection(System.Int32,CSCore.Win32.NativeBool)">
            <summary>
            Selects or deselects one or more streams.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetNativeMediaTypeNative(System.Int32,System.Int32,CSCore.MediaFoundation.MFMediaType@)">
            <summary>
            Gets a format that is supported natively by the media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetNativeMediaType(System.Int32,System.Int32)">
            <summary>
            Gets a format that is supported natively by the media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetCurrentMediaType(System.Int32,CSCore.MediaFoundation.MFMediaType@)">
            <summary>
            Gets the current media type for a stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetCurrentMediaType(System.Int32)">
            <summary>
            Gets the current media type for a stream.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetCurrentMediaTypeNative(System.Int32,System.IntPtr,CSCore.MediaFoundation.MFMediaType)">
            <summary>
            This media type defines that format that the Source Reader produces as output. It can
            differ from the native format provided by the media source. See Remarks for more
            information.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetCurrentMediaType(System.Int32,CSCore.MediaFoundation.MFMediaType)">
            <summary>
            This media type defines that format that the Source Reader produces as output. It can
            differ from the native format provided by the media source. See Remarks for more
            information.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetCurrentPositionNative(System.Guid,CSCore.Win32.PropertyVariant)">
            <summary>
            Seeks to a new position in the media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetCurrentPosition(System.Guid,CSCore.Win32.PropertyVariant)">
            <summary>
            Seeks to a new position in the media source.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.ReadSampleNative(System.Int32,System.Int32,System.Int32@,CSCore.MediaFoundation.MFSourceReaderFlag@,System.Int64@,CSCore.MediaFoundation.MFSample@)">
            <summary>
            Reads the next sample from the media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.ReadSample(System.Int32,System.Int32,System.Int32@,CSCore.MediaFoundation.MFSourceReaderFlag@,System.Int64@)">
            <summary>
            Reads the next sample from the media source.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.FlushNative(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.Flush(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetServiceForStreamNative(System.Int32,System.Guid,System.Guid,System.IntPtr@)">
            <summary>
            Queries the underlying media source or decoder for an interface.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetServiceForStream(System.Int32,System.Guid,System.Guid)">
            <summary>
            Queries the underlying media source or decoder for an interface.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetPresentationAttributeNative(System.Int32,System.Guid,CSCore.Win32.PropertyVariant@)">
            <summary>
            Gets an attribute from the underlying media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetPresentationAttribute(System.Int32,System.Guid)">
            <summary>
            Gets an attribute from the underlying media source.
            </summary>
        </member>
        <member name="T:CSCore.Streams.AutoGain">
            <summary>
            Still in development
            </summary>
        </member>
        <member name="P:CSCore.Streams.NotificationSource.BlockCount">
            <summary>
            Interval in blocks. One block equals on sample for each channel -> (channels *
            bitspersample) bits
            </summary>
        </member>
        <member name="P:CSCore.Streams.NotificationSource.Interval">
            <summary>
            Interval in milliseconds.
            </summary>
        </member>
        <member name="E:CSCore.Streams.SimpleNotificationSource.DataRead">
            <summary>
            Raised after every time the Read method gets called.
            </summary>
        </member>
        <member name="E:CSCore.Streams.SimpleNotificationSource.BlockRead">
            <summary>
            Raised after the specific Interval
            </summary>
        </member>
        <member name="P:CSCore.Streams.SimpleNotificationSource.BlockCount">
            <summary>
            Interval in blocks. One block equals on sample for each channel -> (channels *
            bitspersample) bits
            </summary>
        </member>
        <member name="P:CSCore.Streams.SimpleNotificationSource.Interval">
            <summary>
            Interval in milliseconds.
            </summary>
        </member>
        <member name="M:CSCore.Streams.SoundInSource.#ctor(CSCore.SoundIn.ISoundIn)">
            <summary>
            Creates an new instance of SoundInSource with a default bufferSize of 5 seconds.
            </summary>
            <param name="soundIn">The soundIn which provides recorded data.</param>
            <remarks>
            Note that soundIn has to be already initialized.
            Note that old data ("old" gets specified by the bufferSize) gets overridden. 
            For example, if the bufferSize is about 5 seconds big, data which got recorded 6 seconds ago, won't be available anymore.
            </remarks>
        </member>
        <member name="M:CSCore.Streams.SoundInSource.#ctor(CSCore.SoundIn.ISoundIn,System.Int32)">
            <summary>
            Creates an new instance of SoundInSource with a default bufferSize of 5 seconds.
            </summary>
            <param name="soundIn">The soundIn which provides recorded data.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <remarks>
            Note that soundIn has to be already initialized.
            Note that old data ("old" gets specified by the bufferSize) gets overridden. 
            For example, if the bufferSize is about 5 seconds big, data which got recorded 6 seconds ago, won't be available anymore.
            </remarks>
        </member>
        <member name="P:CSCore.Tags.ID3.Frames.PictureFrame.Image">
            <summary>
            WARNING: If MimeType equals "-->" the picture will be downloaded from the web.
            Use GetURL() the get the url to the picture. If not, data, contained by the frame will
            be used.
            </summary>
        </member>
        <member name="P:CSCore.Tags.ID3.Frames.Popularimeter.Rating">
            <summary>
            Range from 1(worst) to 255(best). Zero -> Rating disabled.
            </summary>
        </member>
        <member name="P:CSCore.Tags.ID3.Frames.Popularimeter.PlayedCounter">
            <summary>
            - 1 -> ommit the counter. Default length is 4 byte. If 4 byte is not enough to hold the
              number, a byte will be added(up to 8 bytes total).
            </summary>
        </member>
        <member name="M:CSCore.Tags.ID3.Frames.TimestampTextFrame.GetFormatString(System.Int32)">
            <summary>
            Gets the formatstring of the timestamp
            </summary>
            <param name="length">length of the string which has to be parsed</param>
            <returns></returns>
        </member>
        <member name="T:CSCore.ChannelMask">
            <summary>
            Channelmask for WaveFormatExtensible. For more infos see
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd757714(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:CSCore.Codecs.WAV.WaveFileChunk">
            <summary>
            See http://www.sonicspot.com/guide/wavefiles.html#wavefilechunks
            </summary>
        </member>
        <member name="M:CSCore.Win32.PropertyVariant.GetValue">
            <summary>
            Warning: May return null if DataType is not supported.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputDataBuffer.Buffer">
            <summary>
            Pointer to the IMediaBuffer interface of a buffer allocated by the application.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputDataBuffer.Status">
            <summary>
            Status flags. After processing output, the DMO sets this member to a bitwise combination
            of zero or more DMO_OUTPUT_DATA_BUFFER_FLAGS flags.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputDataBuffer.Timestamp">
            <summary>
            Time stamp that specifies the start time of the data in the buffer. If the buffer has a
            valid time stamp, the DMO sets this member and also sets the
            DMO_OUTPUT_DATA_BUFFERF_TIME flag in the dwStatus member. Otherwise, ignore this member.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputDataBuffer.TimeLength">
            <summary>
            Reference time specifying the length of the data in the buffer. If the DMO sets this
            member to a valid value, it also sets the DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH flag in the
            dwStatus member. Otherwise, ignore this member.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputDataBufferFlags.SyncPoint">
            <summary>
            The beginning of the data is a synchronization point. A synchronization point is a
            random access point. For encoded video, this a sample that can be used as a decoding
            start point (key frame). For uncompressed audio or video, every sample is a
            synchronization point.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputDataBufferFlags.Time">
            <summary>
            The buffer's time stamp is valid. The buffer's indicated time length is valid.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputDataBufferFlags.TimeLength">
            <summary>
            The buffer's indicated time length is valid.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputDataBufferFlags.Incomplete">
            <summary>
            There is still input data available for processing, but the output buffer is full.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStreamInfoFlags.WholeSamples">
            <summary>
            The stream contains whole samples. Samples do not span multiple buffers, and buffers do
            not contain partial samples.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStreamInfoFlags.SingleSamplePerBuffer">
            <summary>
            Each buffer contains exactly one sample.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStreamInfoFlags.FixedSampleSize">
            <summary>
            The stream is discardable. Within calls to IMediaObject::ProcessOutput, the DMO can
            discard data for this stream without copying it to an output buffer.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStreamInfoFlags.HoldsBuffers">
            <summary>
            The DMO performs lookahead on the incoming data, and may hold multiple input buffers for
            this stream.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.WholeSamples">
            <summary>
            The stream contains whole samples. Samples do not span multiple buffers, and buffers do
            not contain partial samples.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.SingleSamplePerBuffer">
            <summary>
            Each buffer contains exactly one sample.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.FixedSampleSize">
            <summary>
            All the samples in this stream are the same size.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.Discardable">
            <summary>
            The stream is discardable. Within calls to IMediaObject::ProcessOutput, the DMO can
            discard data for this stream without copying it to an output buffer.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.Optional">
            <summary>
            The stream is optional. An optional stream is discardable. Also, the application can
            ignore this stream entirely; it does not have to set the media type for the stream.
            Optional streams generally contain additional information, or data not needed by all
            applications.
            </summary>
        </member>
        <member name="F:CSCore.DMO.SetTypeFlags.TestOnly">
            <summary>
            Test the media type but do not set it.
            </summary>
        </member>
        <member name="F:CSCore.DMO.SetTypeFlags.Clear">
            <summary>
            Clear the media type that was set for the stream.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputdataBufferFlags.SyncPoint">
            <summary>
            The beginning of the data is a synchronization point.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputdataBufferFlags.Time">
            <summary>
            The buffer's time stamp is valid. The buffer's indicated time length is valid.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputdataBufferFlags.TimeLength">
            <summary>
            The buffer's indicated time length is valid.
            </summary>
        </member>
        <member name="F:CSCore.DMO.ProcessOutputFlags.DiscardWhenNoBuffer">
            <summary>
            Discard the output when the pointer to the output buffer is NULL.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.IMFAttributes">
            <summary>
            Provides a generic way to store key/value pairs on an object. The keys are GUIDs, and the values can be any of the following data types: UINT32, UINT64, double, GUID, wide-character string, byte array, or IUnknown pointer. The standard implementation of this interface holds a thread lock while values are added, deleted, or retrieved.
            For a list of predefined attribute GUIDs, see Media Foundation Attributes. Each attribute GUID has an expected data type. The various "set" methods in IMFAttributes do not validate the type against the attribute GUID. It is the application's responsibility to set the correct type for the attribute.
            To create an empty attribute store, call MFCreateAttributes.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetItem(System.Guid,CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetItemType(System.Guid,System.Int32@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.CompareItem(System.Guid,System.IntPtr,System.Boolean@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.Compare(CSCore.MediaFoundation.IMFAttributes,System.Int32,System.Boolean@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetGUID(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetString(System.Guid,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetAllocatedString(System.Guid,System.String@,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the
            memory for the string.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetBlob(System.Guid,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetAllocatedBlob(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the
            array.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetUnknown(System.Guid,System.Guid,System.Object@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetItem(System.Guid,System.IntPtr)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetGUID(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetBlob(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetUnknown(System.Guid,System.Object)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetCount(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetItemByIndex(System.Int32,System.Guid@,CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.CopyAllItems(CSCore.MediaFoundation.IMFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.Lock(System.IntPtr@,System.Int32@,System.Int32@)">
            <summary>
            Gives the caller access to the memory in the buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.Unlock">
            <summary>
            Unlocks a buffer that was previously locked.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.GetCurrentLength(System.Int32@)">
            <summary>
            Retrieves the length of the valid data in the buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.SetCurrentLength(System.Int32)">
            <summary>
            Sets the length of the valid data in the buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.GetMaxLength(System.Int32@)">
            <summary>
            Retrieves the allocated size of the buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetItem(System.Guid,CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetItemType(System.Guid,System.Int32@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.CompareItem(System.Guid,System.IntPtr,System.Boolean@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.Compare(CSCore.MediaFoundation.IMFAttributes,System.Int32,System.Boolean@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetGUID(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetString(System.Guid,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetAllocatedString(System.Guid,System.String@,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the
            memory for the string.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetBlob(System.Guid,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetAllocatedBlob(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the
            array.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetUnknown(System.Guid,System.Guid,System.Object@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetItem(System.Guid,System.IntPtr)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetGUID(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetBlob(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetUnknown(System.Guid,System.Object)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetCount(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetItemByIndex(System.Int32,System.Guid@,CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.CopyAllItems(CSCore.MediaFoundation.IMFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetSampleFlags(System.Int32@)">
            <summary>
            Retrieves flags associated with the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.SetSampleFlags(System.Int32)">
            <summary>
            Sets flags associated with the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetSampleTime(System.Int64@)">
            <summary>
            Retrieves the presentation time of the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.SetSampleTime(System.Int64)">
            <summary>
            Sets the presentation time of the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetSampleDuration(System.Int64@)">
            <summary>
            Retrieves the duration of the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.SetSampleDuration(System.Int64)">
            <summary>
            Sets the duration of the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetBufferCount(System.Int32@)">
            <summary>
            Retrieves the number of buffers in the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetBufferByIndex(System.Int32,CSCore.MediaFoundation.IMFMediaBuffer@)">
            <summary>
            Retrieves a buffer from the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.ConvertToContiguousBuffer(CSCore.MediaFoundation.IMFMediaBuffer@)">
            <summary>
            Converts a sample with multiple buffers into a sample with a single buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.AddBuffer(CSCore.MediaFoundation.IMFMediaBuffer)">
            <summary>
            Adds a buffer to the end of the list of buffers in the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.RemoveBufferByIndex(System.Int32)">
            <summary>
            Removes a buffer at a specified index from the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.RemoveAllBuffers">
            <summary>
            Removes all buffers from the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetTotalLength(System.Int32@)">
            <summary>
            Retrieves the total length of the valid data in all of the buffers in the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.CopyToBuffer(CSCore.MediaFoundation.IMFMediaBuffer)">
            <summary>
            Copies the sample data to a buffer.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.IMFTransform">
            <summary>
            Implemented by all Media Foundation Transforms (MFTs).
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetStreamLimits(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the minimum and maximum number of input and output streams.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetStreamCount(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the current number of input and output streams on this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetStreamIDs(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            <summary>
            Retrieves the stream identifiers for the input and output streams on this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetInputStreamInfo(System.Int32,CSCore.MediaFoundation.MFInputStreamInfo@)">
            <summary>
            Retrieves the buffer requirements and other information for an input stream.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetOutputStreamInfo(System.Int32,CSCore.MediaFoundation.MFOutputStreamInfo@)">
            <summary>
            Gets the buffer requirements and other information for an output stream on this Media
            Foundation transform (MFT).
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetAttributes(CSCore.MediaFoundation.IMFAttributes@)">
            <summary>
            Retrieves the attribute store for this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetInputStreamAttributes(CSCore.MediaFoundation.IMFAttributes@)">
            <summary>
            Retrieves the attribute store for an input stream on this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetOutputStreamAttributes(CSCore.MediaFoundation.IMFAttributes@)">
            <summary>
            Retrieves the attribute store for an output stream on this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.DeleteInputStream(System.Int32)">
            <summary>
            Removes an input stream from this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.AddInputStreams(System.Int32,System.Int32[])">
            <summary>
            Adds one or more new input streams to this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.SetOutputBounds(System.Int64,System.Int64)">
            <summary>
            Sets the range of time stamps the client needs for output.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTransformSetTypeFlags.TestOnly">
            <summary>
            Test the proposed media type, but do not set it.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MFInputStreamInfo">
            <summary>
            Contains information about an input stream on a Media Foundation transform (MFT). To get these values, call IMFTransform::GetInputStreamInfo.
            </summary>
            <remarks>
            Before the media types are set, the only values that should be considered valid are the MFT_INPUT_STREAM_REMOVABLE and MFT_INPUT_STREAM_OPTIONAL flags in the dwFlags member.
            -The MFT_INPUT_STREAM_REMOVABLE flag indicates that the stream can be deleted.
            -The MFT_INPUT_STREAM_OPTIONAL flag indicates that the stream is optional and does not require a media type.
            After you set a media type on all of the input and output streams (not including optional streams), all of the values returned by the GetInputStreamInfo method are valid. They might change if you set different media types.
            </remarks>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.HnsMaxLatency">
            <summary>
            Maximum amount of time between an input sample and the corresponding output sample, in
            100-nanosecond units. For example, an MFT that buffers two samples, each with a duration
            of 1 second, has a maximum latency of two seconds. If the MFT always turns input samples
            directly into output samples, with no buffering, the latency is zero.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.Flags">
            <summary>
            Bitwise OR of zero or more flags from the InputStreamInfoFlags enumeration.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.Size">
            <summary>
            The minimum size of each input buffer, in bytes. If the size is variable or the MFT does
            not require a specific size, the value is zero. For uncompressed audio, the value should
            be the audio frame size, which you can get from the MF_MT_AUDIO_BLOCK_ALIGNMENT
            attribute in the media type.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.cbMaxLookahead">
            <summary>
            Maximum amount of input data, in bytes, that the MFT holds to perform lookahead.
            Lookahead is the action of looking forward in the data before processing it. This value
            should be the worst-case value. If the MFT does not keep a lookahead buffer, the value
            is zero.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.cbAlignment">
            <summary>
            The memory alignment required for input buffers. If the MFT does not require a specific
            alignment, the value is zero.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MFOutputStreamInfo">
            <summary>
            Contains information about an output stream on a Media Foundation transform (MFT). To get these values, call IMFTransform::GetOutputStreamInfo.
            </summary>
            <remarks>
            Before the media types are set, the only values that should be considered valid is the MFT_OUTPUT_STREAM_OPTIONAL flag in the dwFlags member. This flag indicates that the stream is optional and does not require a media type.
            After you set a media type on all of the input and output streams (not including optional streams), all of the values returned by the GetOutputStreamInfo method are valid. They might change if you set different media types.
            </remarks>
        </member>
        <member name="F:CSCore.MediaFoundation.MFOutputStreamInfo.Flags">
            <summary>
            Bitwise OR of zero or more flags from the _MFT_OUTPUT_STREAM_INFO_FLAGS enumeration.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFOutputStreamInfo.Size">
            <summary>
            Minimum size of each output buffer, in bytes. If the MFT does not require a specific
            size, the value is zero. For uncompressed audio, the value should be the audio frame
            size, which you can get from the MF_MT_AUDIO_BLOCK_ALIGNMENT attribute in the media
            type. If the dwFlags member contains the MFT_OUTPUT_STREAM_PROVIDES_SAMPLES flag, the
            value is zero, because the MFT allocates the output buffers.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFOutputStreamInfo.cbAlignment">
            <summary>
            The memory alignment required for output buffers. If the MFT does not require a specific
            alignment, the value is zero. If the dwFlags member contains the
            MFT_OUTPUT_STREAM_PROVIDES_SAMPLES flag, this value is the alignment that the MFT uses
            internally when it allocates samples. It is recommended, but not required, that MFTs
            allocate buffers with at least a 16-byte memory alignment.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaEvent.GetType(CSCore.MediaFoundation.MediaEventType@)">
            <summary>
            Retrieves the event type.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaEvent.GetExtendedType(System.Guid@)">
            <summary>
            Retrieves the extended type of the event.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaEvent.GetStatus(System.Int32@)">
            <summary>
            Retrieves an HRESULT that specifies the event status.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaEvent.GetValue(CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves the value associated with the event, if any.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEUnknown">
            <summary>
            Unknown event type.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEError">
            <summary>
            Signals a serious error.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEExtendedType">
            <summary>
            Custom event type.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MENonFatalError">
            <summary>
            A non-fatal error occurred during streaming.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionUnknown">
            <summary>
            Session Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionTopologySet">
            <summary>
            Raised after the IMFMediaSession::SetTopology method completes asynchronously
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionTopologiesCleared">
            <summary>
            Raised by the Media Session when the IMFMediaSession::ClearTopologies method completes
            asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionStarted">
            <summary>
            Raised when the IMFMediaSession::Start method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionPaused">
            <summary>
            Raised when the IMFMediaSession::Pause method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionStopped">
            <summary>
            Raised when the IMFMediaSession::Stop method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionClosed">
            <summary>
            Raised when the IMFMediaSession::Close method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionEnded">
            <summary>
            Raised by the Media Session when it has finished playing the last presentation in the
            playback queue.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionRateChanged">
            <summary>
            Raised by the Media Session when the playback rate changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionScrubSampleComplete">
            <summary>
            Raised by the Media Session when it completes a scrubbing request.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionCapabilitiesChanged">
            <summary>
            Raised by the Media Session when the session capabilities change.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionTopologyStatus">
            <summary>
            Raised by the Media Session when the status of a topology changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionNotifyPresentationTime">
            <summary>
            Raised by the Media Session when a new presentation starts.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MENewPresentation">
            <summary>
            Raised by a media source a new presentation is ready.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MELicenseAcquisitionStart">
            <summary>
            License acquisition is about to begin.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MELicenseAcquisitionCompleted">
            <summary>
            License acquisition is complete.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEIndividualizationStart">
            <summary>
            Individualization is about to begin.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEIndividualizationCompleted">
            <summary>
            Individualization is complete.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEnablerProgress">
            <summary>
            Signals the progress of a content enabler object.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEnablerCompleted">
            <summary>
            A content enabler object's action is complete.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEPolicyError">
            <summary>
            Raised by a trusted output if an error occurs while enforcing the output policy.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEPolicyReport">
            <summary>
            Contains status information about the enforcement of an output policy.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEBufferingStarted">
            <summary>
            A media source started to buffer data.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEBufferingStopped">
            <summary>
            A media source stopped buffering data.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEConnectStart">
            <summary>
            The network source started opening a URL.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEConnectEnd">
            <summary>
            The network source finished opening a URL.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEReconnectStart">
            <summary>
            Raised by a media source at the start of a reconnection attempt.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEReconnectEnd">
            <summary>
            Raised by a media source at the end of a reconnection attempt.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MERendererEvent">
            <summary>
            Raised by the enhanced video renderer (EVR) when it receives a user event from the
            presenter.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionStreamSinkFormatChanged">
            <summary>
            Raised by the Media Session when the format changes on a media sink.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceUnknown">
            <summary>
            Source Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceStarted">
            <summary>
            Raised when a media source starts without seeking.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamStarted">
            <summary>
            Raised by a media stream when the source starts without seeking.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceSeeked">
            <summary>
            Raised when a media source seeks to a new position.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSeeked">
            <summary>
            Raised by a media stream after a call to IMFMediaSource::Start causes a seek in the
            stream.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MENewStream">
            <summary>
            Raised by a media source when it starts a new stream.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEUpdatedStream">
            <summary>
            Raised by a media source when it restarts or seeks a stream that is already active.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceStopped">
            <summary>
            Raised by a media source when the IMFMediaSource::Stop method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamStopped">
            <summary>
            Raised by a media stream when the IMFMediaSource::Stop method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourcePaused">
            <summary>
            Raised by a media source when the IMFMediaSource::Pause method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamPaused">
            <summary>
            Raised by a media stream when the IMFMediaSource::Pause method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEndOfPresentation">
            <summary>
            Raised by a media source when a presentation ends.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEndOfStream">
            <summary>
            Raised by a media stream when the stream ends.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEMediaSample">
            <summary>
            Raised when a media stream delivers a new sample.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamTick">
            <summary>
            Signals that a media stream does not have data available at a specified time.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamThinMode">
            <summary>
            Raised by a media stream when it starts or stops thinning the stream.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamFormatChanged">
            <summary>
            Raised by a media stream when the media type of the stream changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceRateChanged">
            <summary>
            Raised by a media source when the playback rate changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEndOfPresentationSegment">
            <summary>
            Raised by the sequencer source when a segment is completed and is followed by another
            segment.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceCharacteristicsChanged">
            <summary>
            Raised by a media source when the source's characteristics change.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceRateChangeRequested">
            <summary>
            Raised by a media source to request a new playback rate.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceMetadataChanged">
            <summary>
            Raised by a media source when it updates its metadata.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESequencerSourceTopologyUpdated">
            <summary>
            Raised by the sequencer source when the IMFSequencerSource::UpdateTopology method
            completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESinkUnknown">
            <summary>
            Sink Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkStarted">
            <summary>
            Raised by a stream sink when it completes the transition to the running state.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkStopped">
            <summary>
            Raised by a stream sink when it completes the transition to the stopped state.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkPaused">
            <summary>
            Raised by a stream sink when it completes the transition to the paused state.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkRateChanged">
            <summary>
            Raised by a stream sink when the rate has changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkRequestSample">
            <summary>
            Raised by a stream sink to request a new media sample from the pipeline.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkMarker">
            <summary>
            Raised by a stream sink after the IMFStreamSink::PlaceMarker method is called.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkPrerolled">
            <summary>
            Raised by a stream sink when the stream has received enough preroll data to begin
            rendering.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkScrubSampleComplete">
            <summary>
            Raised by a stream sink when it completes a scrubbing request.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkFormatChanged">
            <summary>
            Raised by a stream sink when the sink's media type is no longer valid.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkDeviceChanged">
            <summary>
            Raised by the stream sinks of the EVR if the video device changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEQualityNotify">
            <summary>
            Provides feedback about playback quality to the quality manager.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESinkInvalidated">
            <summary>
            Raised when a media sink becomes invalid.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionNameChanged">
            <summary>
            The audio session display name changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionVolumeChanged">
            <summary>
            The volume or mute state of the audio session changed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionDeviceRemoved">
            <summary>
            The audio device was removed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionServerShutdown">
            <summary>
            The Windows audio server system was shut down.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionGroupingParamChanged">
            <summary>
            The grouping parameters changed for the audio session.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionIconChanged">
            <summary>
            The audio session icon changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionFormatChanged">
            <summary>
            The default audio format for the audio device changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionDisconnected">
            <summary>
            The audio session was disconnected from a Windows Terminal Services session
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionExclusiveModeOverride">
            <summary>
            The audio session was preempted by an exclusive-mode connection.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METrustUnknown">
            <summary>
            Trust Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEPolicyChanged">
            <summary>
            The output policy for a stream changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEContentProtectionMessage">
            <summary>
            Content protection message
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEPolicySet">
            <summary>
            The IMFOutputTrustAuthority::SetPolicy method completed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseBackupCompleted">
            <summary>
            DRM License Backup Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseBackupProgress">
            <summary>
            DRM License Backup Progress
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseRestoreCompleted">
            <summary>
            DRM License Restore Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseRestoreProgress">
            <summary>
            DRM License Restore Progress
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseAcquisitionCompleted">
            <summary>
            DRM License Acquisition Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMIndividualizationCompleted">
            <summary>
            DRM Individualization Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMIndividualizationProgress">
            <summary>
            DRM Individualization Progress
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMProximityCompleted">
            <summary>
            DRM Proximity Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseStoreCleaned">
            <summary>
            DRM License Store Cleaned
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMRevocationDownloadCompleted">
            <summary>
            DRM Revocation Download Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformUnknown">
            <summary>
            Transform Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformNeedInput">
            <summary>
            Sent by an asynchronous MFT to request a new input sample.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformHaveOutput">
            <summary>
            Sent by an asynchronous MFT when new output data is available from the MFT.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformDrainComplete">
            <summary>
            Sent by an asynchronous Media Foundation transform (MFT) when a drain operation is
            complete.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformMarker">
            <summary>
            Sent by an asynchronous MFT in response to an MFT_MESSAGE_COMMAND_MARKER message.
            </summary>
        </member>
        <member name="M:CSCore.DMO.IWMResamplerProps.SetHalfFilterLength(System.Int32)">
            <summary>
            Specifies the quality of the output.
            </summary>
            <param name="quality">Specifies the quality of the output. The valid range is 1 to 60,
            inclusive.</param>
            <returns></returns>
        </member>
        <member name="T:CSCore.MediaFoundation.MFTMessageType">
            <summary>
            http: //msdn.microsoft.com/de-de/library/ms697223(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.CommandFlush">
            <summary>
            Requests the MFT to flush all stored data.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.CommandDrain">
            <summary>
            Requests the MFT to drain any stored data.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.SetD3DManager">
            <summary>
            Sets or clears the Direct3D Device Manager for DirectX Video Accereration (DXVA).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.NotifyBeginStreaming">
            <summary>
            Notifies the MFT that streaming is about to begin.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.NotifyEndStreaming">
            <summary>
            Notifies the MFT that streaming is about to end.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.NotifyEndOfStream">
            <summary>
            Notifies the MFT that an input stream has ended.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.NotifyStartOfStream">
            <summary>
            Notifies the MFT that the first sample is about to be processed.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSound.DirectSoundNotifyEventArgs.RequestStopPlayback">
            <summary>
            Set this to stop the notification thread
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.FeedbackDefault">
            <summary>
            Default percentage of output fed back into input.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.FeedbackMax">
            <summary>
            Maximum percentage of output fed back into input.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.FeedbackMin">
            <summary>
            Minimum percentage of output fed back into input.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.LeftDelayDefault">
            <summary>
            Default delay for left channel, in milliseconds.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.LeftDelayMax">
            <summary>
            Maximum delay for left channel, in milliseconds.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.LeftDelayMin">
            <summary>
            Minimum delay for left channel, in milliseconds.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.PanDelayDefault">
            <summary>
            Default value that specifies whether to swap left and right delays with each successive
            echo. The default value is zero, meaning no swap.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.PanDelayMax">
            <summary>
            Maximum value that specifies whether to swap left and right delays with each successive
            echo. The default value is zero, meaning no swap.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.PanDelayMin">
            <summary>
            Minimum value that specifies whether to swap left and right delays with each successive
            echo. The default value is zero, meaning no swap.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.RightDelayDefault">
            <summary>
            Default delay for right channel, in milliseconds.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.RightDelayMax">
            <summary>
            Maximum delay for right channel, in milliseconds.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.RightDelayMin">
            <summary>
            Minimum delay for right channel, in milliseconds.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.WetDryMixDefault">
            <summary>
            Default ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.WetDryMixMax">
            <summary>
            Maximum ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.DirectSound.DSEchoEffect.WetDryMixMin">
            <summary>
            Minimum ratio of wet (processed) signal to dry (unprocessed) signal.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSound.DSEchoEffect.SetAllParameters(CSCore.SoundOut.DirectSound.DSFXEcho@)">
            <summary>
            The SetAllParameters method sets the echo parameters of a buffer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.SoundOut.DirectSound.DSEchoEffect.GetAllParameters(CSCore.SoundOut.DirectSound.DSFXEcho@)">
            <summary>
            The GetAllParameters method retrieves the echo parameters of a buffer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="P:CSCore.SoundOut.DirectSound.DSEchoEffect.WetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal. Must be in the range from
            DSFXECHO_WETDRYMIX_MIN through DSFXECHO_WETDRYMIX_MAX (all wet). The default value is
            50.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSound.DSEchoEffect.Feedback">
            <summary>
            Percentage of output fed back into input, in the range from DSFXECHO_FEEDBACK_MIN
            through DSFXECHO_FEEDBACK_MAX. The default value is 50.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSound.DSEchoEffect.LeftDelay">
            <summary>
            Delay for left channel, in milliseconds, in the range from DSFXECHO_LEFTDELAY_MIN
            through DSFXECHO_LEFTDELAY_MAX. The default value is 500 ms.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSound.DSEchoEffect.RightDelay">
            <summary>
            Delay for right channel, in milliseconds, in the range from DSFXECHO_RIGHTDELAY_MIN
            through DSFXECHO_RIGHTDELAY_MAX. The default value is 500 ms.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSound.DSEchoEffect.PanDelay">
            <summary>
            Value that specifies whether to swap left and right delays with each successive echo.
            The default value is zero, meaning no swap. Possible values are defined as
            DSFXECHO_PANDELAY_MIN (equivalent to FALSE) and DSFXECHO_PANDELAY_MAX (equivalent to
            TRUE).
            </summary>
        </member>
        <member name="F:CSCore.Tags.ID3.ID3v2TextEncodingRestriction.IsoOrUTF8">
            <summary>
            encoded with ISO-8859-1 [ISO-8859-1] or UTF-8 [UTF-8]
            </summary>
        </member>
        <member name="M:CSCore.Utils.BitReader.#ctor(System.Byte*,System.Int32)">
            <summary>
            </summary>
            <param name="buffer">buffer</param>
            <param name="offset">offset in bits</param>
        </member>
        <member name="T:CSCore.SoundOut.DirectSound.DSBufferCapsFlags">
            <summary>
            Line 2081
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.DirectSound.DSResult">
            <summary>
            http: //msdn.microsoft.com/en-us/library/windows/desktop/ee416775%28v=vs.85%29.aspx
            TODO: finish
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.MMInterop.MMInterops.WaveCallback">
            <summary>
            http: //msdn.microsoft.com/en-us/library/dd743869%28VS.85%29.aspx
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.MMInterop.MMTime">
            <summary>
            http: //www.pinvoke.net/default.aspx/Structures/MmTime.html
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.MMInterop.MMTimeType">
            <summary>
            http: //s1.directupload.net/images/111012/2iwfeto3.png
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.dataBuffer">
            <summary>
            pointer to locked data buffer (lpData)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.bufferLength">
            <summary>
            length of data buffer (dwBufferLength)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.bytesRecorded">
            <summary>
            used for input only (dwBytesRecorded)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.userData">
            <summary>
            for client's use (dwUser)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.flags">
            <summary>
            assorted flags (dwFlags)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.loops">
            <summary>
            loop control counter (dwLoops)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.next">
            <summary>
            PWaveHdr, reserved for driver (lpNext)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.reserved">
            <summary>
            reserved for driver
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.MMInterop.WaveHeaderFlags">
            <summary>
            WaveHeaderFlags: http://msdn.microsoft.com/en-us/library/aa909814.aspx#1
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.MMInterop.WaveMsg">
            <summary>
            uMsg
            http: //msdn.microsoft.com/en-us/library/dd743869%28VS.85%29.aspx
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.PlaybackState">
            <summary>
            Playbackstate of playback
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.PlaybackState.Stopped">
            <summary>
            Playback is stopped
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.PlaybackState.Playing">
            <summary>
            Playback is playing
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.PlaybackState.Paused">
            <summary>
            Playback is paused
            </summary>
        </member>
        <member name="M:CSCore.Streams.SineGenerator.#ctor">
            <summary>
            1000Hz, 0.5 Amplitude, 0.0 phase
            </summary>
        </member>
        <member name="T:CSCore.Utils.CSMath">
            <summary>
            Fasst Mathematische Operationen zusammen die hin und wieder Verwendung finden
            </summary>
        </member>
        <member name="T:CSCore.Utils.CSMath.CRC16">
            <summary>
            http: //flac.sourceforge.net/format.html#frame_footer
            CRC-16 (polynomial = x^16 + x^15 + x^2 + x^0, initialized with 0) of everything before
            the crc, back to and including the frame header sync code
            </summary>
        </member>
        <member name="T:CSCore.Utils.CSMath.CRC8">
            <summary>
            http: //flac.sourceforge.net/format.html#frame_header
            CRC-8 (polynomial = x^8 + x^2 + x^1 + x^0, initialized with 0) of everything before the
            crc, including the sync code
            </summary>
        </member>
    </members>
</doc>
